{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/authentication/200518","result":{"data":{"markdownRemark":{"id":"ed2e1466-7a97-5466-b770-680a8bc865f3","html":"<h1 id=\"인증authentication\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9Dauthentication\" aria-label=\"인증authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증(Authentication)</h1>\n<ul>\n<li>인증(Authentication)은 유저의 identification을 확인하는 절차이다.</li>\n<li>즉 유저의 아이디와 비번을 확인 하는 절차</li>\n<li>인증을 하기 위해서는 먼저 유저의 아이디와 비번을 생성하는 기능도 필요하다.</li>\n</ul>\n<h2 id=\"로그인-절차\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%A0%88%EC%B0%A8\" aria-label=\"로그인 절차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 절차</h2>\n<ul>\n<li>유저 아이디와 비번 생성</li>\n<li>유저 비번 암호화해서 DB에 저장.</li>\n<li>유저가 로그인을 시도함 (아이디와 비밀번호 입력)</li>\n<li>유저가 입력한 비밀번호를 암호화 한 후, 암호화되어 DB에 저장해두었던 비밀번호와 비교하여 일치하면 로그인 성공</li>\n<li>로그인이 성공하면 <code class=\"language-text\">acecss token</code>을 클라이언트에게 전송</li>\n<li>유저는 로그인 성공 후 다음부터는 access token을 header에 첨부해서 서버에 request를 보내서 로그인이 유지되도록 한다.</li>\n</ul>\n<h2 id=\"jwt-json-web-tokens\" style=\"position:relative;\"><a href=\"#jwt-json-web-tokens\" aria-label=\"jwt json web tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT (JSON Web Tokens)</h2>\n<p>앞서 이야기한 로그인 절차에서 access token을 이용해서 유저를 식별하고 로그인이 끊기지 않도록 유지하는 방법에 대해 좀 더 자세히 알아보자. <br></p>\n<h2 id=\"유저-비밀번호-암호화\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%A0%80-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94\" aria-label=\"유저 비밀번호 암호화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유저 비밀번호 암호화</h2>\n<ul>\n<li>유저의 비밀번호를 그대로 DB에 저장하면 해킹을 당했을 시 개인정보가 노출되는 위험이 있기 때문에 반드시 암호화 작업을 거친다.\n(개인정보보호법에 명시되어 있기도 함)</li>\n<li>비밀번호 암호화에는 주로 <strong>단방향 해쉬 함수 (one-way hash function)</strong>가 일반적으로 쓰인다.\n그 외에 https 인증서를 활용하는 통신 암호화를 통해 보안관리를 하기도 한다.</li>\n</ul>\n<h3 id=\"단방향-해쉬-함수\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%ED%95%B4%EC%89%AC-%ED%95%A8%EC%88%98\" aria-label=\"단방향 해쉬 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 해쉬 함수</h3>\n<p>단방향 해쉬 함수는 원본 메시지를 변환하여 암호화된 메시지인 다이제스트를 생성한다. 암호화된 메시지로는 원본메시지를 알 수 없기 때문에 단방향성 이라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">예를 들어, &quot;test password&quot;를 hash256이라는 해쉬 함수를 사용하면\n0b47c69b1033498d5f33f5f7d97bb6a3126134751629f4d0185c115db44c094e 값이 나온다.</code></pre></div>\n<p>단방향 해쉬함수의 주된 방식은 <code class=\"language-text\">Salting</code>과 <code class=\"language-text\">Key Stretching</code>이 있다.</p>\n<ul>\n<li>Salting : 실제 비밀번호 외에 추가적으로 랜덤 데이터를 더해서 해시값을 계산하는 방법</li>\n<li>Key Stretching : 단방향 해쉬값을 계산 한 후 그 해쉬값을 또 해쉬하고 이를 또 반복하는 방법 <br>\n<strong>[참고] Salting과 Key Stretching을 구현한 해쉬 함수중 가장 널리 사용되는 것이 bcrypt이다. bcrypt는 처음부터 비밀번호를 단방향 암호화 하기 위해 만들이전 해쉬함수 이다.</strong></li>\n</ul>\n<p>회원가입과 로그인을 인증/인가라고 한다.\n여기서 가장 중요한 부분은 비밀번호의 보안인데,\n이걸 어떻게 잘 관리하는지가 백엔드 엔지니어에게 굉장히 중요한 포인트이다.</p>\n<ol>\n<li>해슁을 통해 비밀번호를 암호화</li>\n<li>통신을 암호화</li>\n<li>-</li>\n</ol>\n<h2 id=\"인가\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EA%B0%80\" aria-label=\"인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인가</h2>\n<p>http가 stateless기 때문에 발생하는 문제 (로그인이 유지되지 않는 문제, 사용자를 식별할 수 있는 부분)을 해결하기 위해 사용하는게 인가이다.</p>\n<p>로그인한 사용자만 댓글을 쓸수있거나, 다운을 받을 수 있게 하기 등을 구현한다.</p>\n<p>만들어진 웹토큰을 서버에서 보내주면 프론트는 쿠키나 로컬스토리지 등에 저장해놓고,\n인가가 필요한 서비스를 구현할때 헤더에 토큰을 담아서 서버에 요청을 하는 식으로 사용한다.</p>\n<p>json이 어떻게 생겼고 token을 어떻게 사용하는지에 대해 이해를 해두자.</p>","fields":{"slug":"/posts/authentication/200518","tagSlugs":["/tag/authentication/"]},"frontmatter":{"date":"2020-05-17T04:12:03.284Z","description":"","tags":["authentication"],"title":"[보완예정] 인증(Authentication) / 인가(Authorization) ","socialImage":null}}},"pageContext":{"slug":"/posts/authentication/200518"}}}