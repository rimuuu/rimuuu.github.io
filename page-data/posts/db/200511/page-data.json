{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/db/200511","result":{"data":{"markdownRemark":{"id":"ee90172c-4a30-59a4-a1df-ca299f800457","html":"<h1 id=\"1-introduction\" style=\"position:relative;\"><a href=\"#1-introduction\" aria-label=\"1 introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Introduction</h1>\n<h2 id=\"1---1-what-is-data-structure자료구조-and-why\" style=\"position:relative;\"><a href=\"#1---1-what-is-data-structure%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-and-why\" aria-label=\"1   1 what is data structure자료구조 and why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 - 1. What is Data Structure(자료구조) and Why?</h2>\n<ul>\n<li>자료 구조란 데이터에 편하게 접근하고 조작하기 위한 데이터를 저장, 조작하는 방법으로, <br>\n상황과 문맥에 맞게 데이터를 담을 수 있는 적절한 구조를 말한다.</li>\n<li>데이터에 맞는 적절한 자료 구조를 사용하는 것은 전체 개발 시스템에 굉장히 큰 영향을 미칠만큼 중요하다.</li>\n<li>자료 구조에는 여러가지 종류가 있는데, 모든 목적에 부합하는 최적의 자료구조란 존재하지 않는다. <br> 따라서 각각의 자료구조가 갖는 장점과 한계를 잘 이해하고, 상황에 맞게 올바른 자료구조를 선택하는 것이 중요하다.</li>\n<li>각 언어별로 자료 구조의 종류와 사용방법을 익히는 것도 중요하지만, 각 자료구조의 본질과 컨셉을 이해하고 상황에 맞는 적절한 자료구조를 선택하는 것이 가장 중요하다.</li>\n</ul>\n<h2 id=\"1---2-자료-구조의-분류\" style=\"position:relative;\"><a href=\"#1---2-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"1   2 자료 구조의 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 - 2. 자료 구조의 분류</h2>\n<p><img src=\"https://user-images.githubusercontent.com/60246689/81528222-2945b380-9397-11ea-9402-93b7f2da8ef9.png\" alt=\"스크린샷 2020-05-11 오후 2 52 50\"></p>\n<h3 id=\"primitive-data-structure-단순-구조-br\" style=\"position:relative;\"><a href=\"#primitive-data-structure-%EB%8B%A8%EC%88%9C-%EA%B5%AC%EC%A1%B0-br\" aria-label=\"primitive data structure 단순 구조 br permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Data Structure (단순 구조) <br></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">: 프로그래밍에서 사용되는 기본 데이터 타입\n\n     - integer\n     - float\n     - string\n     - boolean</code></pre></div>\n<h3 id=\"non-primitive-data-structure-비-단순구조-br\" style=\"position:relative;\"><a href=\"#non-primitive-data-structure-%EB%B9%84-%EB%8B%A8%EC%88%9C%EA%B5%AC%EC%A1%B0-br\" aria-label=\"non primitive data structure 비 단순구조 br permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Primitive Data Structure (비 단순구조) <br></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">: 여러 데이터를 목적에 맞게 효과적으로 저장하는 자료구조\n\n    (1) Linear Data Structure (선형구조)\n     : 저장되는 자료의 전후 관계가 1:1\n    - List\n    - Stacks\n    - Queues\n\n    (2) Non-Linear Data Structure (비선형 구조)\n    : 데이터 항목 사이의 관계가 1:n 또는 n:m\n    - Graphs\n    - Trees</code></pre></div>\n<h2 id=\"1-3-일반적으로-가장-자주-사용되는-자료-구조\" style=\"position:relative;\"><a href=\"#1-3-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%9E%A5-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 3 일반적으로 가장 자주 사용되는 자료 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. 일반적으로 가장 자주 사용되는 자료 구조</h2>\n<ul>\n<li>Array(Python에서는 List)</li>\n<li>Tuple</li>\n<li>Set</li>\n<li>Dictionary</li>\n<li>Stack &#x26; Queue</li>\n<li>Tree</li>\n</ul>\n<h1 id=\"2-data-structure-arraylist\" style=\"position:relative;\"><a href=\"#2-data-structure-arraylist\" aria-label=\"2 data structure arraylist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. [Data Structure] Array(List)</h1>\n<h2 id=\"2-1-정의\" style=\"position:relative;\"><a href=\"#2-1-%EC%A0%95%EC%9D%98\" aria-label=\"2 1 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 정의</h2>\n<ul>\n<li>JavaScript에서는 Array, Python에서는 List</li>\n<li>Array는 가장 기초적이고 단순하면서도 가장 자주 사용되는 자료구조</li>\n</ul>\n<p>참고: Python에서는 List가 더 많이 사용되고 대부분 큰 차이가 없어서 List를 사용한다.\n기능적으로는 거의 동일하지만 메모리 효율 면에서 Array가 유리하다.\n다만 Python에서 사용하기 좀 더 편리한 게 List.</p>\n<h2 id=\"2-2-특징--순차적으로-데이터를-저장하는-자료-구조\" style=\"position:relative;\"><a href=\"#2-2-%ED%8A%B9%EC%A7%95--%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%98%EB%8A%94-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 2 특징  순차적으로 데이터를 저장하는 자료 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 특징 : 순차적으로 데이터를 저장하는 자료 구조</h2>\n<ul>\n<li>Array의 가장 큰 특징은 순차적으로 데이터를 저장한다는 점이다.</li>\n<li>Array는 주로 서로 연결된 데이터들을 순차적으로 저장할 때 사용한다.</li>\n<li>혹은 순서가 상관 없더라도 서로 연결된 데이터들을 저장할 때 일반적이다.</li>\n</ul>\n<p><strong>기타특징</strong></p>\n<ul>\n<li>삽입 순서대로 저장된다. (즉, 새로 삽입되는 요소는 array의 새로운 꼬리가 된다.)</li>\n<li>이미 생성된 리스트이더라도 수정이 가능하다. (mutable)</li>\n<li>동일한 값도 여러번 삽입 가능하다.</li>\n<li>\n<p><strong>multi-dimentional Array (다중차원 배열)</strong></p>\n<ul>\n<li>Array의 요소가 array가 될 수 있다. 이러한 array를 다중차원 array라고 한다.\n일반적으로 2차원 array가 가장 많이 사용된다.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/60246689/81529233-60b55f80-9399-11ea-9a64-bd7627c04a0a.png\" alt=\"스크린샷 2020-05-11 오후 3 09 03\"></p>\n<h2 id=\"2-3-array-내부-구조\" style=\"position:relative;\"><a href=\"#2-3-array-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 3 array 내부 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. Array 내부 구조</h2>\n<ul>\n<li>Array는 데이터를 순차적으로 저장하다보니 당연히 요소에 번호를 지정할 수 있다. 마치 학교에서 번호로 부르는 것 처럼 index라는 번호를 데이터에서 사용할 수 있다.</li>\n<li>index는 0부터 시작하고, 마이너스 부호도 가질 수 있다. 마이너스 index는 맨 마지막 요소부터 시작한다. 예를 들어, -1은 맨마지막 요소이다.</li>\n</ul>\n<h3 id=\"왜-array는-데이터를-순차적으로-저장할-수-밖에-없을까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-array%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%A0%80%EC%9E%A5%ED%95%A0-%EC%88%98-%EB%B0%96%EC%97%90-%EC%97%86%EC%9D%84%EA%B9%8C\" aria-label=\"왜 array는 데이터를 순차적으로 저장할 수 밖에 없을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 Array는 데이터를 순차적으로 저장할 수 밖에 없을까?</h3>\n<ul>\n<li>그 이유는 실제 메모리가 물리적으로 순차적 저장이 되기 때문이다.</li>\n<li>\n<p>데이터에 순서가 있기 때문에 1) indexing 2) slicing 이 가능하다.</p>\n<ul>\n<li>indexing: index를 사용해서 특정 요소를 읽어들이는 게 가능</li>\n<li>slicing: 요소의 특정 부분을 따로 분리해서 조작하는 게 가능</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-4-단점\" style=\"position:relative;\"><a href=\"#2-4-%EB%8B%A8%EC%A0%90\" aria-label=\"2 4 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. 단점</h2>\n<h3 id=\"1-removing-or-adding-elements-정보가-자주-변경되는-데이터에-적합하지-않음\" style=\"position:relative;\"><a href=\"#1-removing-or-adding-elements-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%90%EC%A3%BC-%EB%B3%80%EA%B2%BD%EB%90%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"1 removing or adding elements 정보가 자주 변경되는 데이터에 적합하지 않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Removing or Adding Elements: 정보가 자주 변경되는 데이터에 적합하지 않음</h3>\n<ul>\n<li>Array에서 순차적으로 담겨있는 데이터 중 중간의 특정 요소를 삭제해야 하는 경우, <br>\n항상 메모리가 순차적으로 이어져있어야 하기 때문에 삭제된 요소 뒤에 있는 모든 요소들을 한칸씩 이동시켜줘야한다.</li>\n<li>그 결과 Array에서 요소를 삭제하는 것은 다른 자료 구조에 비해 느릴수밖에 없다.</li>\n<li>요소를 삭제하는 과정이 코드 상에서는 한 줄 이지만 실제 메모리 상에서 이루어지는 작업은 훨씬 커진다. 새로운 요소를 추가할때도 마찬가지.</li>\n<li>그렇기 때문에 Array는 <strong>정보가 자주 삭제되거나 추가되는 데이터를 담기에는 적절하지 않다.</strong> 🙅‍♀️</li>\n</ul>\n<h3 id=\"2-array-resizing--사이즈를-예측하기-어려운-데이터에-적합하지-않음\" style=\"position:relative;\"><a href=\"#2-array-resizing--%EC%82%AC%EC%9D%B4%EC%A6%88%EB%A5%BC-%EC%98%88%EC%B8%A1%ED%95%98%EA%B8%B0-%EC%96%B4%EB%A0%A4%EC%9A%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"2 array resizing  사이즈를 예측하기 어려운 데이터에 적합하지 않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Array Resizing : 사이즈를 예측하기 어려운 데이터에 적합하지 않음</h3>\n<ul>\n<li>Array는 메모리가 순차적으로 채워지기 때문에 배열이 처음 생성될 때 어느 정도 메모리를 미리 할당한다.(pre-allocation)</li>\n<li>하지만 요소들이 처음 할당한 메모리 이상으로 많아진다면 resizing을 통해 메모리를 더 할당해야한다.</li>\n<li>그리고 추가적으로 할당된 메모리 또한 순차적이어야 하는데, resizing은 상대적으로 오래걸리는 작업이다.</li>\n<li>그렇기 때문에 Array 는 <strong>사이즈 예측이 잘 안 되는 데이터를 다루기에는 적절치 않다.</strong>🙅‍♀️\n<img src=\"https://user-images.githubusercontent.com/60246689/81533267-dcff7100-93a0-11ea-98a0-e9e1094353bd.png\" alt=\"스크린샷 2020-05-11 오후 4 02 37\"></li>\n<li>일반적으로 대부분의 언어에서는 배열의 메모리 pre-allocation과 resizing을 자동으로 실행한다.</li>\n<li>하지만 이러한 점을 알고 있어야 사이즈가 급격하게 자주 늘어날 확률이 있는 데이터는 array 말고 더 적합한 자료구조를 선택해야 한다는 것을 알 수 있다.</li>\n</ul>\n<br>\n<h2 id=\"2-5-array를-언제-사용하면-좋을까\" style=\"position:relative;\"><a href=\"#2-5-array%EB%A5%BC-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"2 5 array를 언제 사용하면 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. Array를 언제 사용하면 좋을까?</h2>\n<ul>\n<li>\n<p>순차적인 데이터를 저장할 때</p>\n<ul>\n<li>ex) 주식 가격. 어제의 2만원과 오늘의 2만원이 다름 >>> 값보다는 순서가 중요한 데이터</li>\n</ul>\n</li>\n<li>다차원 데이터를 다룰 때 >>> Multi-dimensional Array</li>\n<li>어떠한 특정 요소를 빠르게 읽어야 할 때 >> index를 통해 곧바로 읽을 수 있기 때문</li>\n<li>데이터의 사이즈가 급변하게 자주 변하지 않을 때</li>\n<li>요소가 자주 삭제 되거나 추가되지 않을 때</li>\n</ul>\n<br>\n<hr>\n<h1 id=\"3-data-structure-tuple\" style=\"position:relative;\"><a href=\"#3-data-structure-tuple\" aria-label=\"3 data structure tuple permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. [Data Structure] Tuple</h1>\n<h2 id=\"3-1-정의\" style=\"position:relative;\"><a href=\"#3-1-%EC%A0%95%EC%9D%98\" aria-label=\"3 1 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. 정의</h2>\n<p>튜플(tuple)은 몇 가지 점을 제외하곤 List와 거의 비슷하게 데이터를 순차적으로 저장할 수 있는 순열 자료구조인데, List와 다른 점은 다음과 같다.</p>\n<ul>\n<li>리스트는 [ ]으로 둘러싸지만 튜플은 ( )으로 둘러싼다.</li>\n<li>리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.(immutable)</li>\n<li>2-3개 정도의 적은 수의 소규모 데이터를 저장할 때 많이 사용한다.</li>\n<li>함수에서 리턴 값을 한 개 이상 리턴하고 싶을 때 자주 쓰인다.</li>\n</ul>\n<h2 id=\"3-2-tuple의-장점\" style=\"position:relative;\"><a href=\"#3-2-tuple%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"3 2 tuple의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. Tuple의 장점</h2>\n<ul>\n<li>Tuple은 간단한 값을 빨리 표현하고 싶을 때 많이 사용한다.</li>\n<li>\n<p>예를 들면 함수에서 리턴 값을 한 개 이상 리턴하고 싶을 경우 (ex. 지도 좌표)</p>\n<ul>\n<li>Tuple을 사용하는 경우와 class/object 를 사용하는 경우를 비교해보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">//</span> Tuple을 사용하는 경우\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">//</span> Array<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span> 안의 Tuple\n\n<span class=\"token operator\">//</span> Tuple을 안 쓰는 경우에는 <span class=\"token keyword\">class</span>를 생성해야함\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">cord</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n\t\tself<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y</code></pre></div>\n</li>\n</ul>\n<h2 id=\"3-3-tuple의-단점\" style=\"position:relative;\"><a href=\"#3-3-tuple%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"3 3 tuple의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. Tuple의 단점</h2>\n<ul>\n<li>Tuple의 단점은 데이터가 무슨 의미인지 명확하지 않다는 것이다.</li>\n<li>\n<p>데이터의 의미를 문맥을 보고 가정해야 한다.</p>\n<ul>\n<li>예를 들면 객체의 경우 key-value 쌍으로 이루어진 데이터이기 때문에 무슨 데이터인지 파악이 쉽지만, Tuple의 경우 괄호 안에 데이터만 담겨있기 때문에 문맥에 맞게 의미를 추측해야 한다</li>\n</ul>\n</li>\n<li>그렇기 때문에 Tuple은 소규모 데이터를 다루기에 적합합니다.</li>\n<li>cf) 이러한 단점을 극복하기 위해 Named Tuple 이란 것도 존재합니다.(Python)</li>\n</ul>\n<h2 id=\"3-4-언제-사용하면-좋을까\" style=\"position:relative;\"><a href=\"#3-4-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"3 4 언제 사용하면 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-4. 언제 사용하면 좋을까?</h2>\n<ul>\n<li>\n<p>Array(List)를 쓰기에는 간단한 데이터들을 표현할 때 사용한다.</p>\n<ul>\n<li>Tuple이 Array(List) 보다 더 가볍고 메모리도 적게 차지한다.</li>\n<li>예를 들어, 좌표 데이터 :</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">coordinations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ul>\n<br>\n<br>\n<p><em>이글은 <a href=\"#\">wecode bootcamp</a>의 자료구조 세션을 공부하고 정리한 내용입니다.</em></p>","fields":{"slug":"/posts/db/200511","tagSlugs":["/tag/data-structure/"]},"frontmatter":{"date":"2020-05-11T02:12:03.284Z","description":"자료 구조란 데이터에 편하게 접근하고 조작하기 위한 데이터를 저장, 조작하는 방법으로, 상황과 문맥에 맞게 데이터를 담을 수 있는 적절한 구조를 말한다. 데이터에 맞는 적절한 자료 구조를 사용하는 것은 전체 개발 시스템에 굉장히 큰 영향을 미칠만큼 중요하다.","tags":["Data Structure"],"title":"[Data Structure] #1. Intro, Array & Tuple ","socialImage":null}}},"pageContext":{"slug":"/posts/db/200511"}}}