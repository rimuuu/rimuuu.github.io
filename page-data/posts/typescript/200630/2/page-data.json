{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/typescript/200630/2","result":{"data":{"markdownRemark":{"id":"8c887f98-fa6f-52d9-8832-a362b8ce35d3","html":"<h2 id=\"함수에서-타입-사용하기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"함수에서 타입 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에서 타입 사용하기</h2>\n<p>기본적으로 함수를 정의할때에는 <code class=\"language-text\">let a: Function;</code> 이라고 타입을 선언한 뒤,<br>\n함수의 내용을 밑에 정의한다.</p>\n<p>함수의 파라미터에 타입을 지정하는것은 앞선 포스팅에서 다루었는데,<br>\n옵션으로 하나의 파라미터를 더 주고싶다면 파라미터 이름 뒤에 ?를 붙인다.<br>\n만약 옵션 타입을 지정해놓고 값을 입력하지 않으면,<br>\n해당 파라미터는 undefinded가 나온다.<br>\n참고로 옵셔널 파라미터는 항상 가장 마지막에 작성하는것이 코드의 가독성에 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> greet<span class=\"token operator\">:</span> Function<span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, again\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> c<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 15, undefined</span>\n<span class=\"token comment\">// 옵셔널파라미터에 아무값을 주지 않으면 undefined</span></code></pre></div>\n<p>파라미터의 디폴트 값을 지정해주고싶을때는 다음과 같이 쓴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<h2 id=\"타입스크립트와-함수의-return\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%ED%95%A8%EC%88%98%EC%9D%98-return\" aria-label=\"타입스크립트와 함수의 return permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트와 함수의 Return</h2>\n<p>함수의 리턴은 기본적으로 파라미터로 지정된 값들을 그대로 반환한다.<br>\n그래서 리턴 값의 타입을 설정해주지 않아도 number와 number의 합은 number를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">minus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3</span></code></pre></div>\n<p>만약 명시적으로 함수의 반환하는 값을 정의하고싶다면 다음과 같이 작성할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> minus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<p>한 가지 예를 더 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>타입스크립트를 사용하면, 코드를 작성하는 과정에서 함수의 파라미터로 어떤 타입을 넣어야하는지 바로 알 수 있다.<br>\n<img width=\"703\" alt=\"&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2020-06-30 &#x110B;&#x1169;&#x1112;&#x116E; 6 15 38\" src=\"https://user-images.githubusercontent.com/60246689/86108136-c0a8c680-bafd-11ea-96ea-1dff7a9dea38.png\"></p>\n<p>또, 위의 코드 : number는 해당 함수의 결과물이 숫자라는걸 명시하고 있다.<br>\n만약 이때 return 값으로 null 같은걸 넣으면 당연히 에러가 나온다.</p>\n<br>\n<h2 id=\"아무것도-리턴하지-않는-함수-void\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%AC%B4%EA%B2%83%EB%8F%84-%EB%A6%AC%ED%84%B4%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%95%A8%EC%88%98-void\" aria-label=\"아무것도 리턴하지 않는 함수 void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아무것도 리턴하지 않는 함수: void</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">returnNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am just saying hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//함수에서 아무것도 반환하지 않아야 한다면 반환타입을 void로 설정하기</span></code></pre></div>\n<p>만약 함수가 리턴을 하고 있지않다면? <br>\nconsole.log의 동작만 실행하는 함수의 경우 아무것도 리턴을 하고 있지 않는다.<br>\n사실 이 함수도 무언가 값을 반환하고 있다고 볼 수 있는데,<br>\n이때 반환하고 있는 값을 <strong>void</strong>라고 부른다.</p>\n<p>실제로 마우스를 대보면 void를 리턴하고 있다고 나오기 때문에 사실상 아래와 같이 쓸 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>주의할 점은, 타입스크립트에서 void와 undefined를 엄격하게 구분하고 있다는 것이다.<br>\nundefinde는 우리가 옵셔널 파라미터를 주고 아무런 값을 입력하지 않았을때의 결과 같은 거라면,<br>\nvoid는 아무값도 리턴하지 않는 경우를 의미한다.</p>\n<br>\n<br>\n<p><em>이글은 The Net Ninja의 <a href=\"&#x27;/&#x27;\">youtube</a>와 velopert님의 typescript tutorial을 학습함며 정리한 포스팅입니다.</em></p>","fields":{"slug":"/posts/typescript/200630/2","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2020-06-30T03:00:03.284Z","description":"타입스크립트에서 함수의 타입 지정, 파라미터 타입, return type에 대해 정리합니다. ","tags":["typescript"],"title":"[TypeScript] 함수에서 타입 사용하기","socialImage":null}}},"pageContext":{"slug":"/posts/typescript/200630/2"}}}