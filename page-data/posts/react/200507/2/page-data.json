{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/200507/2","result":{"data":{"markdownRemark":{"id":"4e7f6ab8-1eab-54c5-882f-261c1ceb089b","html":"<h2 id=\"component-life-cycle\" style=\"position:relative;\"><a href=\"#component-life-cycle\" aria-label=\"component life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Component Life Cycle</h2>\n<p>앞서 살펴 봤던 Class Component에서 가장 많이 사용되는 method는 render()지만 사실 react component는 단순히 render 말고 더 많은 걸 갖고 있다.\n모든 Componenent들은 <code class=\"language-text\">life cycle method</code>를 가지는데, life cycle method는 기본적으로 react가 component를 생성하고 없애는 방법이다.</p>\n<p>예를 들어서, 앞서 봤던 예시에서 add라는 버튼을 눌러서 component가 업데이트될때 호출되는 다른 function이 있다. 그 전부를 들여다보진 않을거고, 우리가 필요로하는 가장 중요한 것 위주로 살펴보겠다.</p>\n<h3 id=\"1-mounting--컴포넌트-초기-생성\" style=\"position:relative;\"><a href=\"#1-mounting--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B4%88%EA%B8%B0-%EC%83%9D%EC%84%B1\" aria-label=\"1 mounting  컴포넌트 초기 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Mounting : 컴포넌트 초기 생성</h3>\n<p>Mounting은 “태어나는 것”과 같다.\n여기에 해당되는 주요한 함수들은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">constructor()</code> <br>\n컴포넌트 생성자 함수. 컴포넌트가 새로 만들어질때마다 이 함수가 호출되는데,\n이 함수는 javascript class 개념에서 온 함수이다.\n이 부분을 이해하기 위해서는 javascript에서 객체와 class에 대한 공부가 선행되어야 하는데 큰 일은 아니다.</li>\n<li><code class=\"language-text\">render()</code> <br>\n컴포넌트가 mount될때, 컴포넌트가 스크린에 표시될때, 컴포넌트가 웹사이트에 갈때\n가장 먼저 실행되는 함수가 바로 constructor()이고, 그 다음 render()가 실행된다.</li>\n<li><code class=\"language-text\">componentDidMount()</code> <br>\n컴포넌트가 render된 후 실행되는 함수.\n“이봐, 이 컴포넌트는 처음 render됐어”라고 알려주는 녀석이다.\n그래서 순서는 constructor() -> render() -> componentDidMount() 순이다.\n주로 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch등을 통하여 요청을 하는 작업을 진행할때 사용한다.</li>\n</ul>\n<h3 id=\"2-updating--컴포넌트-업데이트\" style=\"position:relative;\"><a href=\"#2-updating--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"2 updating  컴포넌트 업데이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Updating : 컴포넌트 업데이트</h3>\n<p>Updating은 언제 일어날까? 바로 나자신에 의해서다.\n내가 render 함수 안에 정의해놓은 이벤트를 실행할때마다 component의 state가 업데이트되고 이게 바로 component cycle에서 update에 해당한다.</p>\n<p>여기에 해당되는 주요한 함수는 다음이다.</p>\n<ul>\n<li><code class=\"language-text\">render()</code> <br></li>\n<li>\n<p><code class=\"language-text\">shouldComponentUpdate()</code> <br>\n이 api는 컴포넌틀를 최적화하는 작업에서 매우 유용하게 사용된다. 리액트는 변화가 발생하는 부분만 업데이트를 해줘서 효율적이라는 특징이 있는데, 변화가 발생한 부분만 감지해내기 위해서는 Virtual DOM에 한 번 그려줘야한다. 즉, 현재 컴포넌트 상태가 업데이트 되지 않아도 부모 컴포넌트가 리렌더링되면 자식들도 렌더링 된다. 물론 변화가 없으면 DOM은 조작하지 않게 되기 때문에 CPU를 엄청나게 사용하는 건 아니지만 어쨌든 낭비되는 CPU 처리량이 발생할 수 밖에 없다. 이 낭비를 줄이기 위해서 <code class=\"language-text\">shouldComponentUpdate</code>를 사용한다. 기본적으로는 true를 반환하고, 조건에 따라 false를 반환하면 해당 조건에서는 render 함수를 실행하지 않게 할 수 있다.</p>\n<br>\n</li>\n<li><code class=\"language-text\">componentDidUpdate()</code> <br>\ncomponentDidUpdate()는 컴포넌트가 업데이트된 직후에 실행되는 함수이다.\n그래서 setState()를 호출하면 먼저 render()가 실행되고, 업데이트가 완료되면 componentUpdate()가 실행되는 것이다. 이 시점에서는 this.prop과 this.state가 바뀌어있다.</li>\n</ul>\n<h3 id=\"3-unmounting--컴포넌트-제거\" style=\"position:relative;\"><a href=\"#3-unmounting--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A0%9C%EA%B1%B0\" aria-label=\"3 unmounting  컴포넌트 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Unmounting : 컴포넌트 제거</h3>\n<p>컴포넌트가 더이상 필요하지 않게 되었을때 컴포넌트를 죽게 할 수 있다.\n어떻게 컴포넌트가 죽을까?\n페이지를 바꿀때, 혹은 state를 이용해서 컴포넌트를 교체할 때 등. 컴포넌트를 제거하는데에는 다양한 방법이 있다.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">componentWillUnmount()</code> <br></p>\n<p>이 함수는 컴포넌트가 죽기 전에 실행되는 함수이다. 시뮬레이션을 통해 볼 수는 없지만 내가 컴포넌트를 생성하고 그 컴포넌트가 죽을때마다 호출할 수 있다. 주로 등록했던 이벤트를 제거하는 용도로 사용한다.</p>\n</li>\n</ul>\n<p>이제 컴포넌트의 라이프사이클을 이용해서 내가 원하는대로 컴포넌트를 조작할 수 있게 되었다. 우왕ㅋ굳ㅋ</p>\n<br>\n<br>\n<br>\n<p><em>이 글은 velopert님의 <a href=\"https://velopert.com/3631\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">리액트 튜토리얼</a>, <a href=\"https://academy.nomadcoders.co/courses/216871/lectures/10881303\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nomad Coders Acacdemy</a>의 강의를 참고하여 작성했습니다.</em></p>","fields":{"slug":"/posts/react/200507/2","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-05-07T05:12:03.284Z","description":"모든 Componenent들은 life cycle이라는 api를 가지는데, 이는 기본적으로 react가 component를 생성하고, 업데이트하고, 제거할 때 호출할 수 있는 함수들을 말한다.","tags":["react"],"title":"[React Basis] Component Life Cycle API","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/react/200507/2"}}}