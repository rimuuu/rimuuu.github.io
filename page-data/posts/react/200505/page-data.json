{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/200505","result":{"data":{"markdownRemark":{"id":"88659e37-b154-595d-b8a7-cb838cbfa8b7","html":"<p> <code class=\"language-text\">자 이제 시작이야~</code> <code class=\"language-text\">본격적인 리액트의 세계 속으로!</code>\n지난 포스팅에서 리액트의 특징 몇가지와 컴포넌트를 만드는 법에 대해 알아봤다. 이번에는 단순히 같은 내용의 컴포넌트를 찍어내는게 아니라,\n내가 원하는 데이터에 따라 언제든지 다른 내용을 찍어내는 컴포넌트를 만들어보려고 한다. </p>\n<h2 id=\"컴포넌트--컴포넌트-데이터-전달하기\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0\" aria-label=\"컴포넌트  컴포넌트 데이터 전달하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트  컴포넌트, 데이터 전달하기</h2>\n<p><strong>핵심:  JSX에서는 컴포넌트에서 컴포넌트로 정보를 보낼 수 있다. </strong> <br>\n리액트가 멋진 이유는 이렇게 재사용 가능한 컴포넌트를 만들 수 있다는 점이다.\n그럼 이제 본격적으로 컴포넌트에서 어떻게 데이터를 전달하는지 알아보겠다.</p>\n<h3 id=\"basis\" style=\"position:relative;\"><a href=\"#basis\" aria-label=\"basis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basis</h3>\n<p>컴포넌트에 정보를 보낼때는 html에 속성값을 주는것과 굉장히 비슷한 모양을 하고 있다.   <code class=\"language-text\">&lt;Food name=&quot;kimchi&quot; /&gt;</code> <br>\n이 방식을 구체적으로 말하면 ‘Food component에 kimchi라는 value로 property name을 줬다’고 할 수 있다.</p>\n<p>이 값은 문자열뿐만 아니라 불리언, 객체, 배열 등 모든 데이터타입을 넣을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token operator\">&lt;</span>Food favorite<span class=\"token operator\">=</span><span class=\"token string\">\"kimchi\"</span>\n             something<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> \n             papapapa<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">4</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>이렇게 한 상태에서 누군가가 Food컴포넌트로 정보를 보내려고 하면, 리액트는 이 모든 키값들을 가져온다. 그리고 food 컴포넌트의 인자(argument)로 그것들을 넣는다. 실제로 인자로 받는 값을 콘솔에 찍어보면 컴포넌트에서 받고 있는 모든 데이터들이 나오고 object에 담겨있는걸 알 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/60246689/81065757-10f91300-8f17-11ea-823a-cda5eb3075ba.png\" alt=\"React App - Chrome 2020-05-05 오후 8_51_28\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token constant\">I</span> like potato<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Food favorite<span class=\"token operator\">=</span><span class=\"token string\">\"kimchi\"</span> something<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> papapapa<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span> <span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>해당 데이터들이 객체이기 때문에 객체안에 담긴 키를 인자로 전달하고, 그 인자를 받게끔 함수를 만들면 내가 원하는 데이터를 반환하는 컴포넌트를 만들수 있다.</p>\n<p>혹은 객체 리터럴 안에 키(프로퍼티명)을 사용하는 방식 <code class=\"language-text\">{ favorite }</code> 도 동일한 결과를 얻을 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>favorite<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">//결과 kimchi 출력 </span></code></pre></div>\n<p>그래서 이 특징을 이용해서 앞서 봤던 Food 컴포넌트가 받게 되는 데이터에 따라 리턴하는 문장의 내용을 바꾸게 만들어보자. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Food</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> favorite<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token constant\">I</span> like <span class=\"token punctuation\">{</span>favorite<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Food favorite<span class=\"token operator\">=</span><span class=\"token string\">\"kimchi\"</span>  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Food favorite<span class=\"token operator\">=</span><span class=\"token string\">\"fried_chicken\"</span>  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Food favorite<span class=\"token operator\">=</span><span class=\"token string\">\"dduckbokki\"</span>  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/60246689/81064992-a8f5fd00-8f15-11ea-88be-74439a6dc3bf.png\" alt=\"React App - Chrome 2020-05-05 오후 9_14_43\"></p>\n<p>이 결과 내가 넣은 키값에 반응하는 컴포넌트가 만들어졌다~\n완전 멋쪄… 리액트 이녀석… </p>","fields":{"slug":"/posts/react/200505","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-05-05T04:12:03.284Z","description":"`자 이제 시작이야~ 본격적인 리액트의 세계 속으로!`  지난 포스팅에서 리액트의 특징 몇가지와 컴포넌트를 만드는 법에 대해 알아봤다. 이번에는 단순히 같은 내용의 컴포넌트를 찍어내는게 아니라 내가 원하는 데이터에 따라 언제든지 다른 내용을 찍어내는 컴포넌트를 만들어보려고 한다.  ","tags":["react"],"title":"[React Basis] 컴포넌트에 정보를 전달하기 1 ","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/react/200505"}}}