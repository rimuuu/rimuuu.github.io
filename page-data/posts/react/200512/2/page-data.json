{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/200512/2","result":{"data":{"markdownRemark":{"id":"eea052f9-07a0-5042-8c45-8188a3e90222","html":"<h2 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<p>✔️ state의 개념에 대해 한 문장으로 설명할 수 있다. <br>\n✔️ 부모 요소의 state 데이터를 자식 요소에서 반영시킬 수 있다. <br>\n✔️ 이벤트를 통해 state 데이터를 바꿀 수 있다. <br>\n✔️ props의 개념에 대해 한 문장으로 설명할 수 있다. <br>\n✔️ 부모 state - 자식의 props - 자식 component 어떻게 연결되는지 명확히 이해한다. <br>\n✔️ props 개념을 활용하여 자식 요소에서 일어난 이벤트로 부모의 state 값을 바꿀 수 있다.<br></p>\n<h1 id=\"states--props-of-component\" style=\"position:relative;\"><a href=\"#states--props-of-component\" aria-label=\"states  props of component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States &#x26; Props of Component</h1>\n<h2 id=\"states\" style=\"position:relative;\"><a href=\"#states\" aria-label=\"states permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>states</h2>\n<p>State는 컴포넌트 내부에서 정의하는 컴포넌트의 상태값을 말하는데, 객체 형식으로 되어 있다. 항상 디폴트 값을 지정해줘야한다.\nstate는 <strong>고정적인 데이터가 아니라 변경될 수 있는 데이터를 처리할 때</strong> 주로 사용하는데, 그 이유는 리액트가 기본적으로 상태 변화를 계속적으로 감지하기 때문에 화면을 한번 그려준 후 state의 값을 변경하면 그 값을 자동으로 감지한 후 render() 함수를 실행해서 화면에 적용을 해준다. state는 props보다 좀 더 지능적으로 동작하기 때문에 함수형 컴포넌트가 아닌, 클래스형 컴포넌트를 사용한다.</p>\n<p><strong>[참고] 컴포넌트를 사용하는 두가지 방법 중 어느 상황에 어떤 컴포넌트를 사용해야 할까?</strong> <br>\n먼저 함수형 컴포넌트의 장점은 다음과 같다.</p>\n<ul>\n<li>클래스형 컴포넌트보다 선언하기가 훨씬 편하다.</li>\n<li>메모리 자원도 클래스형 컴포넌트보다 덜 사용한다.</li>\n<li>프로젝트를 완성하여 빌드한 후 배포할 때 함수형 컴포넌트를 사용하는 것이 결과물의 파일 크기가 더 작다.</li>\n</ul>\n<p>하지만 결정적인 단점으로 state와 라이프사이클 api의 사용이 불가능하다는 점이 있었다.\n하지만 이 단점은 Hooks라는 기능이 도입되면서 해결되었다.\n리액트 공식 매뉴얼에서는 컴포넌트를 작성할때 함수형과 Hooks를 사용하도록 권장하고 있다.\n하지만 그렇다고 해서 클래스형 컴포넌트가 사라지는 것은 아니므로 클래스형 컴포넌트의 기능은 꼭 알아두어야 한다.</p>\n<p>state를 이용하는 클래스형 컴포넌트를 사용할때는 다음의 방법을 지키면 된다.</p>\n<ol>\n<li>state를 사용할때는 먼저 constructor함수 안에 state의 기본값을 정의해야한다. 이때 props를 매개변수로 보내고, super()가 이 props를 전달받아서 props를 초기화 해주어야 한다.</li>\n<li>그리고 render() 함수가 꼭 필요하다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//디폴트값 지정하기</span>\n     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n         imgList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n         fontColor<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n         fontSize<span class=\"token operator\">:</span> <span class=\"token string\">\"15px\"</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function-variable function\">handleColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n         fontSize<span class=\"token operator\">:</span> <span class=\"token string\">\"100px\"</span>\n         fontColor<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>fontColor<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>fontColor <span class=\"token operator\">?</span> <span class=\"token string\">\"login\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleColor<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">로그인</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>fontColor <span class=\"token operator\">?</span> <span class=\"token string\">\"blue\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Change Color</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n     </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<ul>\n<li>이벤트를 발생시키는 요소와 이벤트 결과로 바뀌어지는 요소는 별개라는것을 인지하고 있는게 중요하다.</li>\n<li>삼항연산자를 이용해서 클래스이름을 토글로 바꿀 수 있다. 인라인스타일링은 최대한 지양하기…</li>\n<li>참고로 화살표 함수 쓰면 bind를 안해도 된다.</li>\n<li>\n<p>이벤트 함수에서 ()는 바로 호출을 의미하기 때문에 쓰지 않아야하지만, 자식요소로 인자를 넘겨줘야할때는 괄호를 써야한다. handleClick(num) 이런 식으로…\n이 방식은 굉장히 많이 쓰이는데, 이벤트함수 호출할때 setState의 값만 다르게 넘겨주는 방식으로 주로 쓰인다.</p>\n<br>\n<br>\n</li>\n</ul>\n<h2 id=\"props\" style=\"position:relative;\"><a href=\"#props\" aria-label=\"props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props</h2>\n<p>리액트는 props를 입력으로 받아서 리액트 요소를 반환하는 형태로 동작한다.<br> 여기서 props는 속성(property)의 약자이다.\nprops는 어떤 컴포넌트 내부에 다른 컴포넌트가 있을때 부모컴포트에 있는 state의 데이터를 자식 컴포넌트에 전달하기 위해 사용한다.\n주로 고정적인 데이터를 전달할때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LoginChild</span></span> <span class=\"token attr-name\">backColor</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>childBackColor<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginChild</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>backColor<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>backColor<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>props를 이용하면 부모에 있는 이벤트함수도 자식에게 전달할 수 있다.\n부모 컴포넌트에 자식 컴포넌트를 어펜드해줄때 변수 = {전달하고싶은값} 형식으로 보내고,\n내려받는 자식 컴포넌트에서는 this.props.변수 로 받는다.</p>\n<p>부모의 스테이트를 자식 컴포넌트의 프롭스로 내려받는데\n이때 []를 잘 따져줘야한다. (뭔말인지 잘 모르겠다.)</p>\n<p>혹은 부모에서 자식으로 값을 줄때 아예 값만 다르게 여러번 보내줄 수도 있다.\n자식은 그 값이 필요한 곳에서 props로 받기만 하면 되니깐.</p>\n<p>참고로, keydown 이벤트같은건 onChange로 하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function-variable function\">handleInput</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n        자바스크립트는 바뀐 스테이트값이 아니라 그 이전에 값이 찍히는데<span class=\"token punctuation\">,</span>\n        그걸 방지하기 위해서 콜백함수로 확인을 해봐야한다<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>setState는 비동기처리를 해야하는데,</p>","fields":{"slug":"/posts/react/200512/2","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-05-17T03:12:03.284Z","description":"","tags":["react"],"title":" [React Basis] Session #3 React Props & States ","socialImage":null}}},"pageContext":{"slug":"/posts/react/200512/2"}}}