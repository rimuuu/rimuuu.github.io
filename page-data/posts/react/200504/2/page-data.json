{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/200504/2","result":{"data":{"markdownRemark":{"id":"c6ce492f-683f-5b7f-9185-3bb68726a017","html":"<h2 id=\"리액트reactjs를-알아보자구\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8reactjs%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90%EA%B5%AC\" aria-label=\"리액트reactjs를 알아보자구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트(react.js)를 알아보자구~</h2>\n<p><img src=\"https://user-images.githubusercontent.com/60246689/81028739-a667b900-8ebd-11ea-8a45-8e767be62efc.png\" alt=\"react_graph\"></p>\n<p>리액트는 페이스북과 인스타그램에서 사용자 경험을 향상하기 위해 만든 라이브러리로, 브라우저가 동적으로 기능할 때 서버에서 코드를 받아 다시 렌더링해야되는 문제(server side rendering)를 해결하기 위해 만들어졌다.\n방대한 자료와 유연함이라는 장점 때문에 최근 몇년 간 가장 인기 있는 프론트엔드 프레임워크 자리를 지키고 있다.</p>\n<h2 id=\"리액트의-특징\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"리액트의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트의 특징</h2>\n<h3 id=\"컴포넌트-기반의-화면-구성\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B8%B0%EB%B0%98%EC%9D%98-%ED%99%94%EB%A9%B4-%EA%B5%AC%EC%84%B1\" aria-label=\"컴포넌트 기반의 화면 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 기반의 화면 구성</h3>\n<p>리액트는 화면의 한 부분을 <code class=\"language-text\">컴포넌트</code> 라는 단위로 나누어서 독립적으로 관리할 수 있게 한다. 규모가 큰 프로젝트에서 코드를 기능별로 컴포넌트화하면 코드를 관리하기 쉽고 반복되는 부분을 대체할 수 있게 해주어서 <code class=\"language-text\">코드 재사용성</code>을 높여준다. 또 컴포넌트 기반의 화면을 구성을 하면 빠르고 효율적으로 화면을 구성할 수 있다.</p>\n<h3 id=\"jsx-템플릿을-사용하지-않는다\" style=\"position:relative;\"><a href=\"#jsx-%ED%85%9C%ED%94%8C%EB%A6%BF%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"jsx 템플릿을 사용하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX: 템플릿을 사용하지 않는다.</h3>\n<p>JSX는 리액트에서 커스텀한 자바스크립트 확장 문법인데, 자바스크립트에서 html과 자바스크립트 변수, 속성 값을 사용하게 해준다.\n별도의 템플릿은 사용하지 않는다.</p>\n<h3 id=\"virtual-dom-전체-dom을-다시-그리지-않는다\" style=\"position:relative;\"><a href=\"#virtual-dom-%EC%A0%84%EC%B2%B4-dom%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EA%B7%B8%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"virtual dom 전체 dom을 다시 그리지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Virtual DOM: 전체 DOM을 다시 그리지 않는다.</h3>\n<p><code class=\"language-text\">Virtual DOM</code>은 가상의 DOM이다. 어떤 변화가 일어나면, 실제로 브라우저의 DOM 에 새로운걸 넣는것이 아니라, 자바스크립트로 이뤄진 가상 DOM 에 한번 렌더링을 하고, 기존의 DOM 과 비교를 한 다음에 정말 변화가 필요한 곳에만 업데이트를 해주는 것이다.</p>\n<p>기존의 자바스크립트 DOM을 이용한 방식은 매번 DOM전체를 직접 접근하여 변화가 있을때마다 html/css/js파일 전체를 다시 리랜더링 하기 때문에 느려질 수 밖에 없었다. 하지만 리액트는 가상DOM을 이용해서 더욱 효과적으로 화면 렌더링을 할 수 있게 만들었다.</p>\n<h2 id=\"그래서-리액트-어떻게-쓰냐구\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%83%90%EA%B5%AC\" aria-label=\"그래서 리액트 어떻게 쓰냐구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서, 리액트 어떻게 쓰냐구?</h2>\n<h3 id=\"react-components\" style=\"position:relative;\"><a href=\"#react-components\" aria-label=\"react components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Components</h3>\n<p>컴포넌트는 기본적으로 html을 반환(return)하는 함수인데, 리액트는 기본적으로 컴포넌트와 함께 동작한다. 모든것은 컴포넌트.\n이제부터 리액트를 쓰는 모든 과정은 컴포넌트를 만들고, 컴포넌트가 예뻐보이게 만들거고, 컴포넌트가 데이터를 보여주게 하는 과정이 될 거다.\n<code class=\"language-text\">이제 컴포넌트는 너가 새롭게 제일 좋아하는 단어가 될 것~</code></p>\n<h3 id=\"how-do-we-make-components-\" style=\"position:relative;\"><a href=\"#how-do-we-make-components-\" aria-label=\"how do we make components  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do we make components ?</h3>\n<p>1 .js파일 하나를 생성한다.\n그리고 반드시 react를 임포트 해줘야한다. 그렇지 않으면 리액트는 이 파일에서 jsx가 있는 컴포넌트를 사용한다는걸 인식하지 못한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>대문자로 시작하는 이름의 함수를 만들고 실행내용으로 원하는 html 태그를 입력한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Potato</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> <span class=\"token constant\">I</span> love potato<span class=\"token punctuation\">.</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>export한다.\n이렇게만 하고 마치면 vscode에서 해당값이 선언되었지만 아직 읽히지 않았다고 알려준다.\n아직 export를 하지 않았기 때문!</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Potato<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"how-do-we-use-components\" style=\"position:relative;\"><a href=\"#how-do-we-use-components\" aria-label=\"how do we use components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do we use components?</h3>\n<p>컴포넌트를 만들고 실행하고 싶을때는 다음과 같은 처음 보는 모양새를 갖는다.\n<code class=\"language-text\">&lt;Potato /&gt;</code>\n리액트 고유의 문법이라서 꼭 이렇게 지켜줘야지 html이 정해진 함수 내용으로 반환된다.\njavascript안에 html 구조가 있는 이러한 조합의 구조를 <code class=\"language-text\">jsx</code>라고 부른다.\n이건 리액트에서 나온 매우 커스텀한 유일한 개념이고 나머지는 javascript에서 배우는 문법을 그대로 가져간다. (variables, array, classes, map…)</p>\n<p>자 이제 함수를 사용하면 되는데, 어떻게 사용할 수 있을까?</p>\n<h4 id=\"핵심-하나의-앱에서-하나의-컴포넌트만-렌더링-가능하다\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%ED%95%98%EB%82%98%EC%9D%98-%EC%95%B1%EC%97%90%EC%84%9C-%ED%95%98%EB%82%98%EC%9D%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A7%8C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\" aria-label=\"핵심 하나의 앱에서 하나의 컴포넌트만 렌더링 가능하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심: 하나의 앱에서 하나의 컴포넌트만 렌더링 가능하다.</h4>\n<p>반드시 알아둬야할 건 리액트는 <code class=\"language-text\">하나의 앱에서 단 하나의 컴포넌트만 렌더링 할 수 있다</code>는 것이다.\n그래서 이미 렌더링한 컴포넌트가 있다면, 그 컴포넌트 안에 내가 새로만든 컴포넌트를 임포트에서 사용해야한다.</p>\n<p>app.js 파일안에 있는 <code class=\"language-text\">&lt;App /&gt;</code> 컴포넌트안에 <code class=\"language-text\">&lt;Potato /&gt;</code>를 임포트 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Potato <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Potato\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Potato</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"I love potato\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> Hello <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Potato <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고로 여기서 <code class=\"language-text\">. /</code>은 같은 디렉토리라는 뜻이다. <code class=\"language-text\">Potato.js</code>와 <code class=\"language-text\">App.js</code>가 같은 디렉토리 안에 있기 때문에 임포트할때 저렇게 적어주는 것이다.</p>\n<p>그리고 내가 원하는 위치에서 <code class=\"language-text\">Potato</code> 컴포넌트를 사용해주면 끝이다.\n다음 포스팅에서는 본격적으로 컴포넌트에 데이터를 전달하는 방법에 대해 알아보겠다.</p>\n<br>\n<br>\n<br>\n<p><em><a href=\"https://blog.gaerae.com/2016/04/hello-react.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">개발자스럽다</a></em>\n<br>\n<em><a href=\"https://academy.nomadcoders.co/courses/enrolled/216871\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NomadCoderAcademy</a></em></p>","fields":{"slug":"/posts/react/200504/2","tagSlugs":["/tag/react/","/tag/web/"]},"frontmatter":{"date":"2020-05-04T05:12:03.284Z","description":"리액트는 페이스북과 인스타그램에서 사용자 경험을 향상하기 위해 만든 라이브러리로, 브라우저가 동적으로 기능할 때 서버에서 코드를 받아 다시 렌더링해야되는 문제(server side rendering)를 해결하기 위해 만들어졌다.","tags":["react","web"],"title":"[React] 안녕, 리액트? + 컴포넌트를 만드는 첫번째 방법","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/react/200504/2"}}}