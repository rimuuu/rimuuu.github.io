{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/git/200430/2","result":{"data":{"markdownRemark":{"id":"2661a50e-0d92-5dcb-afd1-1de9c03c10fc","html":"<h1 id=\"remote-저장소와-local-저장소\" style=\"position:relative;\"><a href=\"#remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-local-%EC%A0%80%EC%9E%A5%EC%86%8C\" aria-label=\"remote 저장소와 local 저장소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remote 저장소와 Local 저장소</h1>\n<p>앞서 살펴봤던 Git의 저장소(repository)는 두가지 종류가 있는데, <code class=\"language-text\">Remote repository</code>와 <code class=\"language-text\">Local repository</code>가 바로 그것이다.<br>\nGit은 개인적으로 코드의 변경사항을 추적하고 프로젝트를 관리하기 위해 사용할 뿐만 아니라 다른 사람들과 협업하여 개발할때 역시 아주 중요한 역할을 담당하고 그 부분을 위해 등장하는게 바로 remote repository(원격저장소)이다.</p>\n<p>이 원격저장소를 위해 주로 사용되는 것은 <code class=\"language-text\">Github</code>인데, git을 효율적으로 관리하기 위한 원격서버이자 클라우드 역할을 담당한다. 평소에는 자신의 PC의 Local repository에서 작업하다가 자신의 소스코드를 공개하고 싶을 때, 혹은 다른사람들과 협업을 시작해야할때 Remote repository에 개발한 소스코드를 업로드한다. (<code class=\"language-text\">Push</code>) 내 소스코드를 올리는 것 뿐만 아니라, Remote repository에서 다른 사람의 소스코드를 자신의 Local repository로 가져올 수도 있다. (<code class=\"language-text\">Pull</code>)</p>\n<p><img src=\"https://images.velog.io/images/rimu/post/7368df43-dd64-4d1e-abf8-b5a3d228c970/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.27.33.png\">\n<br></p>\n<p><img src=\"https://images.velog.io/images/rimu/post/cc53a881-aac4-438b-9a6f-ad49b8b1bfa8/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.30.40.png\"></p>\n<h2 id=\"remote-저장소와-local-저장소-연결하기\" style=\"position:relative;\"><a href=\"#remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-local-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"remote 저장소와 local 저장소 연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remote 저장소와 Local 저장소 연결하기</h2>\n<ol>\n<li>github에서 새로운 레파지토리를 생성한다.</li>\n<li><code class=\"language-text\">$ git remote add origin 레파지토리주소</code>\n가령 내가 만든 westagram이라는 레파지토리를 로컬과 연결하고 싶다면 <br>\n$ git remote add origin <a href=\"https://github.com/rimuuu/westagram.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rimuuu/westagram.git</a> 이라고 입력한다.\n참고로 여기서 origin은 큰 의미 없는 git을 구분하기 위해서 사용하는 이름표 같은 것이다.\n내가 원하는 아무 단어로 바꿔도 아무 상관없다.</li>\n<li>remote 저장소가 잘 연결되었는지 확인해보고싶다면\n<code class=\"language-text\">$ git remote -v</code>라고 입력해보면 현재 내 로컬저장소와 연결된 remote저장소의 목록을 볼 수 있다.\n내가 개발하고 있는 westagram 폴더에 가서 명령을 입력해보니 내 remote 저장소의 목록이 나왔다.\n<img src=\"https://images.velog.io/images/rimu/post/ffb89da6-9eb5-4b12-beef-05b2a6a20e62/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.42.11.png\"></li>\n<li>개발을 하다가 이 시점을 기록하고싶다면 <code class=\"language-text\">git add</code> <code class=\"language-text\">git commit</code>의 과정을 거친다.</li>\n<li><code class=\"language-text\">git push origin master</code>라고 입력하면 내 remote저장소로 push가 된다.</li>\n</ol>\n<h2 id=\"브랜치를-넘나들며-작업하고-remote-저장소에-올리기\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%A5%BC-%EB%84%98%EB%82%98%EB%93%A4%EB%A9%B0-%EC%9E%91%EC%97%85%ED%95%98%EA%B3%A0-remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-%EC%98%AC%EB%A6%AC%EA%B8%B0\" aria-label=\"브랜치를 넘나들며 작업하고 remote 저장소에 올리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치를 넘나들며 작업하고 Remote 저장소에 올리기</h2>\n<h3 id=\"branch\" style=\"position:relative;\"><a href=\"#branch\" aria-label=\"branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branch</h3>\n<p>모든 작업 내용을 master에만 푸쉬하면 너무 잦은 충돌과 소스가 뒤엉키는 문제가 생긴다.\n그래서 최대한 기능별로 branch를 나눠서 작업을 하는게 필요하다.</p>\n<p>흔히 branch를 딴다고 말하는데, 브랜치를 딴다는건 이름표만 바꿔서 특정시간대로 프로젝트를 복제하는거다.\n브랜치를 따서 작업해서 좋은점은 특정시점의 복제본을 갖고 있기 때문에 기준점이 있어서 검토 작업을 할때 혼란이 덜하다. 그 외에도 아래와 같은 장점을 갖고 있다.</p>\n<blockquote>\n<p>1.다른 사람들과 협업할때 같은 부분을 다르게 개발하여 발생하는 충돌을 줄일 수 있다. 2.기능별로 정해진 부분만 작업할 수 있어서 프로젝트 관리가 수월하다.</p>\n</blockquote>\n<p>브랜치를 넘나들며 작업을 하고 싶을때는 아래와 같은 순서를 따르면 된다.\n일반적인 git workflow를 벗어나지 않되, branch를 생성하고 checkout하고 push할때 branch 이름을 적용하는 정도만 달라진다.\n<code class=\"language-text\">git branch feature/comment</code>\n네이밍을 할때는 기능별로 나누기때문에 feature라고 시작하는게 일반적인 방</p>\n<p><code class=\"language-text\">git branch</code> 브랜치가 잘 생성되었는지 본다</p>\n<p><code class=\"language-text\">git checkout feature/comment</code> 기준 브랜치를 바꾼다. (작업영역을 바꾼다)</p>\n<p><code class=\"language-text\">git add .</code> 작업의 변경사항을 스테이지에 올린다.</p>\n<p><code class=\"language-text\">git commit -m “”</code> 커밋한다.</p>\n<p><code class=\"language-text\">git push origin feature/comment</code> 브랜치의 변경사항을 원격에 올린다.</p>\n<p>이제 원격에 새로운 브랜치가 생성되고 변경사항이 반영이 된다.</p>\n<hr>\n<p>깃 짱짱맨! 이해하고 나니 깃 넘 재밌다.ㅎㅎㅎ (아직까지는🙄?) <br>\n이제 1일 1커밋 가보즈아~<br>\n<img src=\"https://images.velog.io/images/rimu/post/83839fa9-f5d0-43a5-8390-3c24d2065ded/IMG_1840.GIF\"></p>\n<br>\n<p><em>이글은 위코드 부트캠프의 git 세션을 듣고 정리한 내용입니다.</em></p>","fields":{"slug":"/posts/git/200430/2","tagSlugs":["/tag/git/"]},"frontmatter":{"date":"2020-04-30T04:12:03.284Z","description":"앞서 살펴봤던 Git의 저장소(repository)는 두가지 종류가 있는데, `Remote repository`와 `Local repository`가 바로 그것이다.   Git은 개인적으로 코드의 변경사항을 추적하고 프로젝트를 관리하기 위해 사용할 뿐만 아니라 다른 사람들과 협업하여 개발할때 역시 아주 중요한 역할을 담당하고 그 부분을 위해 등장하는게 바로 remote repository(원격저장소)이다.","tags":["Git"],"title":"[Git] Git Remote 저장소와 Local 저장소 연결하여 관리하기  ","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/git/200430/2"}}}