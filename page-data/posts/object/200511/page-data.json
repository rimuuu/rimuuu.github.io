{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/object/200511","result":{"data":{"markdownRemark":{"id":"fd1abedb-8702-5a9a-ae31-e5deb003ba64","html":"<h2 id=\"프로퍼티-getter와-setter\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-getter%EC%99%80-setter\" aria-label=\"프로퍼티 getter와 setter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 getter와 Setter</h2>\n<p>자바스크립트에서 프로퍼티는 크게 <strong>데이터 프로퍼티(data property)</strong>와 <strong>접근자 프로퍼티(accessor property)</strong>라는 두가지 종류로 나뉜다. <br> 데이터 프로퍼티는 그동안 일반적으로 사용한 프로퍼티를 말하기 때문에 생략하고,\n이번 포스팅에서 새롭게 정리해볼 주제는 접근자 프로퍼티(accessor property)이다. <br></p>\n<p>접근자 프로퍼티의 본질은 함수인데, 값을 획득(get)하고 설정(set)하는 역할을 담당한다. 객체에서 함수로 담겨있는 프로퍼티기 때문에 메서드라고 부른다. 객체 리터럴 안에서 getter와 setter는 <code class=\"language-text\">get</code>과 <code class=\"language-text\">set</code>으로 나타낼 수 있다.</p>\n<!-- - getter는 객체의 특정 프로퍼티값을 가져오도록 하기 위한 메서드이다.\n- setter는 객체의 특정 프로퍼티값을 설정하기 위한 메서드이다. -->\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">propName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// getter, obj.propName을 실행할 때 실행되는 코드</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">propName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// setter, obj.propNAme = value를 실행할 때 실행되는 코드</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>getter 메서드는 <code class=\"language-text\">obj.propName</code>을 사용해 프로퍼티를 읽으려고 할 때 실행되고, setter 메서드는 <code class=\"language-text\">obj.propName = value</code>로 프로퍼티에 값을 할당하려 할 때 실행된다.</p>\n<p>아래의 코드로 user라는 객체를 만들어서 이해를 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  surname<span class=\"token operator\">:</span> <span class=\"token string\">\"Mayer\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 객체에 fullName이라는 프로퍼티를 추가해 fullName이 John Mayer가 되도록 해보려면 어떻게 할까? <br>\ngetter와 setter를 이용해서 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  surname<span class=\"token operator\">:</span> <span class=\"token string\">\"Mayer\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// John Mayer</span>\nuser<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">'Test'</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>getter 같은 접근자 프로퍼티를 사용하면, 일반 프로퍼티에서 값에 접근하는 것처럼 프로퍼티 값을 얻을 수 있다. <br>\n하지만 이때 <code class=\"language-text\">user.fullName = &#39;Test&#39;</code>를 사용해서 새로운 값을 할당하려고 하면 에러가 발생하는데, <br>\n그 이유는 값을 조회하는 getter 메서드만 있는데 값을 수정하려고 시도했기 때문이다. 이때는 setter 메서드를 추가해서 값의 변경이 가능하게 만들어줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  surname<span class=\"token operator\">:</span> <span class=\"token string\">\"Mayer\"</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">set</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>surname <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//공백을 기준으로 성과 이름 분리하여 새로운 값 할당</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">'Anne Marie'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Anne</span>\nconsole<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Marie</span></code></pre></div>\n<p>이렇게 getter와 setter 메서드를 이용하면 객체에 fullName 이라는 가상의 프로퍼티가 생긴다. <br>\n가상의 프로퍼티는 읽고 쓸 수는 있지만 실제로 존재하지 않는다.</p>\n<p><strong>중요: getter와 setter 메서드는 호출할때 user.fullName = ‘Anne Marie’ 처럼 괄호를 사용하지 않는다. <br>문법적으로 프로퍼티의 값을 재할당하는 것처럼 보인다는걸 기억하자.</strong></p>\n<p>예시를 더 보면서 익숙하게 해보자. setter 메서드를 이용하면 입력된 값의 데이터 타입을 체크하고 원하는 데이터타입이 입력되었을때만 값이 갱신되게 하는 코드를 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _age<span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newAge</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newAge <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> newAge<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You must assign a number to age.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//40</span>\nperson<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token string\">\"40\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'You must assign a number to age.'</span></code></pre></div>\n<br>\n<h2 id=\"getter와-setter-똑똑하게-활용하기\" style=\"position:relative;\"><a href=\"#getter%EC%99%80-setter-%EB%98%91%EB%98%91%ED%95%98%EA%B2%8C-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"getter와 setter 똑똑하게 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getter와 setter 똑똑하게 활용하기</h2>\n<p>getter와 setter를 실제 프로퍼티 값을 감싸는 래퍼(wrapper)처럼 사용한다면, 실제 프로퍼티 값을 직접적으로 수정하지 않고도 원하는대로 값을 통제할 수 있다.<br>\n아래 예시를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"입력하신 값이 너무 짧습니다. 네글자 이상으로 구성된 이름을 입력하세요.\"</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Teo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"입력하신 값이 너무 짧습니다. 네글자 이상으로 구성된 이름을 입력하세요.\"</span></code></pre></div>\n<p>user의 이름은 _name에 저장되고, 프로퍼티에 접근하는건 getter와 setter로 이루어진다. <br>\n기술적으로는 <code class=\"language-text\">user.\\_name</code>을 사용해 이름에 바로 접근할 수 있다. 하지만 밑줄로 시작하는 프로퍼티는 객체 내부에서만 활용하고\n외부에서는 건드리지 않는게 관습이다. 이럴때 바로 접근자 프로퍼티를 이용해 간접적으로 값을 다루는 것이 방법이다.</p>\n<br>\n<h2 id=\"호환성을-위해-사용하기\" style=\"position:relative;\"><a href=\"#%ED%98%B8%ED%99%98%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"호환성을 위해 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호환성을 위해 사용하기</h2>\n<p>접근자 프로퍼티는 언제 어느때나 getter와 setter를 이용해서 데이터 프로퍼티의 행동과 값을 원하는대로 조정할 수 있다는 점에서 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25;</span></code></pre></div>\n<p>그런데 갑자기 코드를 수정할 일이 생겨서 age 대신 birthday라는 프로퍼티를 이용해서 만 나이를 구해야한다고 생각해보자. <br>\n생성자 함수를 수정하면 기존 코드 중 age 프로퍼티를 사용하고 있는 코드를 모두 수정해줘야하는데, 시간이 오래걸리고 힘들다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> birthday</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthday <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1992</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그래서 기존 코드를 그대로 두면서 똑똑하게 수정을 하는, getter를 이용하는 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> birthday</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthday <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">;</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> todayYear <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//현재의 연도</span>\n      <span class=\"token keyword\">return</span> todayYear <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//현재 연도 - 태어난 연도</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1992</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">.</span>birthday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// birthday 사용 가능</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// age 도 그대로 사용 가능</span></code></pre></div>\n<p>이렇게 get을 이용해서 값을 더 유연하게 받을 수 있는 객체로 변경했다.</p>\n<p>defineProperty()라는 다소 생소한 메서드를 사용해서 프로퍼티를 조작했는데, <br>\n이 부분에 대한 추가적인 공부는 참고링크에 달아놓은 자료를 보고 공부해야겠다.</p>\n<br>\n<br>\n<br>\n<br>\n<p><em>이 포스팅은 <a href=\"https://ko.javascript.info/property-accessors#ref-614\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">모던자바스크립트 튜토리얼</a>을 학습하고 정리한 내용입니다.</em></p>","fields":{"slug":"/posts/object/200511","tagSlugs":["/tag/java-script/"]},"frontmatter":{"date":"2020-05-11T01:12:03.284Z","description":"자바스크립트에서 프로퍼티는 크게 데이터 프로퍼티(data property)와 접근자 프로퍼티(accessor property) 라는 두가지 종류로 나뉜다. 이번 포스팅에서 새롭게 정리해볼 주제는 접근자 프로퍼티 (accessor property)이다.","tags":["JavaScript"],"title":"[JavaScript] getter와 setter 메서드 똑똑하게 사용하기   ","socialImage":null}}},"pageContext":{"slug":"/posts/object/200511"}}}