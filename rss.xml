<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Sori's develog ]]></title><description><![CDATA[Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu.]]></description><link>https://rimuuu.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 08 May 2020 10:16:25 GMT</lastBuildDate><item><title><![CDATA[[JavaScript] ES6의 주요 문법 정리 ]]></title><description><![CDATA[ES6에서는 주로 불필요한 타이핑을 줄이고 코드를 효율적으로 작성하기 위한 방향으로 문법적인 부분이 많이 개선되었다. ES6의 내용 전체를 살펴볼 수는 없지만 주요한 내용 위주로 정리해두고 자주 읽어보면서 익숙해져야겠다. ]]></description><link>https://rimuuu.github.io/posts/object/200508/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/object/200508/2</guid><pubDate>Fri, 08 May 2020 02:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about-es6-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about-es6-&quot; aria-label=&quot;about es6  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;About ES6 👀&lt;/h2&gt;
&lt;p&gt;ES6에서는 주로 불필요한 타이핑을 줄이고 코드를 효율적으로 작성하기 위한 방향으로 문법적인 부분이 많이 개선되었다. ES6의 내용 전체를 살펴볼 수는 없지만 주요한 내용 위주로 정리해두고 자주 읽어보면서 익숙해져야겠다.&lt;/p&gt;
&lt;h2 id=&quot;1-scope&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-scope&quot; aria-label=&quot;1 scope permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Scope&lt;/h2&gt;
&lt;p&gt;const와 let은 ES6에서 새로 생긴 개념인데, 이제 var은 웬만하면 잘 쓰이지 않고 const와 let으로 완전히 대체 되었다고 보면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//3&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;는 한번 선언했다면 값을 재할당 할 수 없다. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;은 값을 언제든지 바꿀 수 있다.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; : const와 let / var간의 가장 큰 차이 &lt;br&gt;
const와 let은 &lt;code class=&quot;language-text&quot;&gt;block (function, for, if 등) 안에서만 유효한 변수이다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;참고1&lt;/code&gt;: const는 수정 불가능한 불변성(immutable)을 말하는 것이 아니라 값 재할당이 불가능한 것이다.
그래서 const는 선언할때부터 값을 할당해줘야한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;참고2&lt;/code&gt;: const를 사용하더라도, 배열과 오브젝트의 값을 변경하는 게 가능하다.
const가 객체일때 객체 자체를 바꿀 수는 없지만 프로퍼티로 접근을 했을때는 내부의 값을 바꿔줄 수 있다. 이건 객체 자체가 가진 특성(어떤 값을 저장할때 reference를 저장하기 때문에 const를 사용해서 객체를 선언한다면 메모리주소에 대해 상수로 지정한 것이 된다.) 때문이다. &lt;br&gt;그리고 배열도 따지고 보면 객체이기 때문에 똑같은 특성을 가진다.&lt;/p&gt;
&lt;h3 id=&quot;정리-변수선언-시-기억하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%A6%AC-%EB%B3%80%EC%88%98%EC%84%A0%EC%96%B8-%EC%8B%9C-%EA%B8%B0%EC%96%B5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;정리 변수선언 시 기억하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정리: 변수선언 시 기억하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;const를 기본으로 사용한다.&lt;/li&gt;
&lt;li&gt;변경이 될 수 있는 변수는 let을 사용한다.&lt;/li&gt;
&lt;li&gt;var는 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-string&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-string&quot; aria-label=&quot;2 string permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. String&lt;/h2&gt;
&lt;h3 id=&quot;1-템플릿-문자열-백틱-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%B1%ED%8B%B1-&quot; aria-label=&quot;1 템플릿 문자열 백틱  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 템플릿 문자열 (백틱 `)&lt;/h3&gt;
&lt;p&gt;문자열과 변수를 함께 사용할때 쓸 수 있는 효과적인 방법이 등장했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;coding&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//“hello coding&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-es6에-추가된-새로운-string메서드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-es6%EC%97%90-%EC%B6%94%EA%B0%80%EB%90%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-string%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;2 es6에 추가된 새로운 string메서드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) ES6에 추가된 새로운 string메서드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;startsWith() , endsWith() : 앞 뒤로 일치하는 문자열이 있는지 여부를 판단&lt;/li&gt;
&lt;li&gt;includes() : 문자열이 포함되어 있는지 여부를 판단&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rimuuu is lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;rimuuu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;is&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&quot;3-object&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-object&quot; aria-label=&quot;3 object permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Object&lt;/h2&gt;
&lt;h3 id=&quot;1-객체-안의-키와-값의-이름이-같을때-줄여쓰기-br&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%9D%EC%B2%B4-%EC%95%88%EC%9D%98-%ED%82%A4%EC%99%80-%EA%B0%92%EC%9D%98-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EA%B0%99%EC%9D%84%EB%95%8C-%EC%A4%84%EC%97%AC%EC%93%B0%EA%B8%B0-br&quot; aria-label=&quot;1 객체 안의 키와 값의 이름이 같을때 줄여쓰기 br permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 객체 안의 키와 값의 이름이 같을때 줄여쓰기 &lt;br&gt;&lt;/h3&gt;
&lt;p&gt;Object 생성시에 key와 value가 같다면 간략하게 하나만 사용할 수 있다.
또한, value 값만 전달하거나 function도 바로 선언할 수 있다.
&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hello&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; hello &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//기존&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hello &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//ES6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2-동적-속성-할당을-리터럴-안에-표현-가능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8F%99%EC%A0%81-%EC%86%8D%EC%84%B1-%ED%95%A0%EB%8B%B9%EC%9D%84-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EC%95%88%EC%97%90-%ED%91%9C%ED%98%84-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;2 동적 속성 할당을 리터럴 안에 표현 가능 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 동적 속성 할당을 리터럴 안에 표현 가능&lt;/h3&gt;
&lt;p&gt;객체에 변수가 들어간 키(속성, 프로퍼티)를 대입하는 경우, 동적으로 객체를 변경한다고 말한다.
기존에는 &lt;code class=&quot;language-text&quot;&gt;oldObject[es + 6] = “fantastic”&lt;/code&gt; 이런 식으로 객체 바깥에서 키로 값을 추가해줘야했지만, 새로운 문법에서는 객체 안에서 &lt;code class=&quot;language-text&quot;&gt;{ [변수 ]: 값 }&lt;/code&gt; 가 바로 선언이 가능해졌다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sayNode&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Node&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; es &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ES&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//기존 방식&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; oldobject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;sayJS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;JS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sayNode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; sayNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

oldObject&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;es &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; “fantastic”

&lt;span class=&quot;token comment&quot;&gt;//ES6&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newObject &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    sayJS&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;JS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    sayNode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;es &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Fantastic&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;4화살표-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98&quot; aria-label=&quot;4화살표 함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.화살표 함수&lt;/h2&gt;
&lt;p&gt;기존의 함수선언문과 함수 표현식은 다음과 같았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//함수선언문 (함수를 선언하고 변수에 할당)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//함수표현식&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ES6에서 새로 등장한 화살표 함수는 다음과 같이 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 함수의 내용이 값을 아무것도 가공하지 않고 단순히 리턴만 한다면 한줄로도 줄일 수 있다.
중괄호가 없다면 리턴을 하는 함수라는거라고 이해하면 된다.
중괄호 없이 소괄호만 써도 똑같이 리턴을 하는 함수이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const add3 = (x,y) =&amp;gt; x + y;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;하지만 이렇게 편리하고 효율적인 방식이 등장했다고 해서 무조건 기존의 함수 표현방법이 사라지고 모두 화살표 함수로 대체된 건 아닌데 , 가장 결정적인 이유는 this 때문이다.&lt;/p&gt;
&lt;p&gt;기존의 함수 표현식안과 화살표 함수 안에서 this가 동작하는 방식이 다르다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; relationship1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  friends&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;xero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;logFriends&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; that &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;that&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; friend&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//relationship1.logfriends() 메서드 실행 시, 결과&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//zero nero&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//zero hero&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//zero xero&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체 리터럴의 메서드 안에서 this는 일반적으로 자기 자신이 속한 객체를 가르킨다. &lt;br&gt;
그런데 function 내부의 this는 외부의 this와 다르기 때문에 this를 that이라는 변수에 따로 저장해서 사용했다.&lt;/p&gt;
&lt;p&gt;그런데 function 대신 화살표 함수를 사용하면 this들의 동작이 달라진다.&lt;br&gt;
화살표 함수는 함수 내부의 this를 외부의 this와 같게 만들어준다.
아래 코드는 위와 동일한 결과가 나온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; relationship3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  friends&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;xero&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;logFriends&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; friend&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;화살표 함수가 logFriends()메서드 안의 this와 ForEach()안의 this를 동일하게 만들어버렸다.
그래서 예전에는 logFriends()의 this를 가져오기 위해서 변수에 저장한 뒤에 가져왔는데 이제 그 스텝을 생략해도 되는 것이다.&lt;/p&gt;
&lt;p&gt;그래서 만약에 this를 사용할때, &lt;br&gt;
바깥쪽 함수의 this를 그대로 내부에서도 쓰고싶다면 화살표 함수를 쓰면 되고 &lt;br&gt;
다른 this를 원한다하면 원래의 function을 쓰면 된다.&lt;br&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;5비구조화-할당destructuring&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94-%ED%95%A0%EB%8B%B9destructuring&quot; aria-label=&quot;5비구조화 할당destructuring permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5.비구조화 할당(destructuring)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;구조 분해&lt;/strong&gt; Destructuring 를 사용하면 객체나 배열의 필드 값을 원하는 개별 변수에 대입할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;1-객체의-비구조화-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;1 객체의 비구조화 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 객체의 비구조화 할당&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; candyMachine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음 같은 객체가 있을때 객체의 키에 접근하는 일반적인 방법은 아래와 같다.
변수이름과 키의 이름이 같은데 어쩔 수 없이 반복해서 타이핑을 해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; candyMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getCandy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; candyMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ES6에서 제공하는 새로운 문법을 사용하면 타이핑 하는 수고를 좀 덜 수 있다.
위와 같은 의미이다! 방법만 다를뿐.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const { status, getCandy } = candyMachine&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이 방식은 객체의 데이터가 점점 더 늘어날때 편하게 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const { status, getCandy, a, b } = candyMachine&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;다른 예시를 보며 좀 더 익숙해져보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rimu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  address&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;seoul&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 객체의 키 이름 값으로 새로운 변수 만들기&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 다른 변수 이름으로 객체의 값을 할당 받기&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; myName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; myAge &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;destructuring-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#destructuring-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;destructuring 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Destructuring 활용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JSON으로 전달받은 데이터 객체를 개별 변수로 할당하는 데 활용할 수 있다.&lt;/li&gt;
&lt;li&gt;함수의 인자에 Destructuring을 사용하면 원하는 데이터만 뽑아낼 수 있다.&lt;/li&gt;
&lt;li&gt;이벤트의 콜백 함수에서 필요한 요소만 뽑아올 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// event 전체가 아니라 필요한 요소만 뽑을 수있다.&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

document
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 인자 전달 시 target이나 type만 뽑아낼 수 있다.&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tagName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&quot;참고--destructuring시-메서드-안의-this는-본래의-객체와-작별한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0--destructuring%EC%8B%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%95%88%EC%9D%98-this%EB%8A%94-%EB%B3%B8%EB%9E%98%EC%9D%98-%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9E%91%EB%B3%84%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;참고  destructuring시 메서드 안의 this는 본래의 객체와 작별한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고 : destructuring시 메서드 안의 this는 본래의 객체와 작별한다&lt;/h3&gt;
&lt;p&gt;하지만 이런 비구조화할당을 사용할때에는 주의해야 할 점도 있다.
이때는 this가 의도와 다르게 동작하는 현상이 생길 수도 있다는 것이다.
원래 일반적인 객체의 키밸류에 접근하는 방식을 사용했을때는 this는 메서드가 속해있는 객체를 가르킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; candyMachine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getCandy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; candyMachine&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCandy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 비구조화 할당을 통해서 getCandy가 candyMachine과 분리되었을때는 candyMachine과 연관이 없어져버려서 this를 사용해도 이 this가 길을 잃어버리게 된다.
&lt;code class=&quot;language-text&quot;&gt;const { getCandy } = candyMachine;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그래서 이런 경우에는 꼭 candyMachine을 꼭 붙여줘야한다.
아니면 이 방법 외에
&lt;code class=&quot;language-text&quot;&gt;getCandy.call(candyMachine)&lt;/code&gt; 처럼 this를 바꿔주는 메서드를 이용해야한다.
이 부분이 자주 하게되는 실수라서 기억해놓는게 중요하다.&lt;/p&gt;
&lt;h3 id=&quot;2-배열의-비구조화할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B0%B0%EC%97%B4%EC%9D%98-%EB%B9%84%EA%B5%AC%EC%A1%B0%ED%99%94%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;2 배열의 비구조화할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 배열의 비구조화할당&lt;/h3&gt;
&lt;p&gt;배열에서도 비구조화할당은 유용하게 쓰일 수 있는데 처음 보면 깜짝 놀라게 된다. 👀&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nodejs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; node &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; bool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 아래는 똑같은 것을 의미하는 코드다. 원더걸스…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nodejs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//console.log(node) &quot;nodejs&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//console.log(obj) {}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//console.log(bool) true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;참고-spread-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0-spread-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;참고 spread 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고: spread 연산자&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;[ ... arr]&lt;/code&gt; 와 같이 표기한다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;원본 배열을 바꾸지 않고 열거 가능한 요소를 하나씩 전개한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dami&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rimu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jjang-gu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 결과 [&quot;dami&quot;, &quot;rimu&quot;, &quot;jjagn-gu&quot;]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newData &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;spread 연산자 활용하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//600&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.inflearn.com/course/node-js-%EA%B5%90%EA%B3%BC%EC%84%9C/dashboard&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Node.js교과서&lt;/a&gt;&lt;/em&gt; &lt;br&gt;
&lt;em&gt;&lt;a href=&quot;https://velog.io/@godori/ES6-%EC%A0%95%EB%A6%AC-vpjmrh6hhe&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;godori님 포스팅&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[JavaScript] 객체(object) 개념과 객체에 접근하는 법 정리, 예제 풀이 ]]></title><description><![CDATA[객체는 키(key)-값(value) 쌍으로된 데이터의 모음으로, 순서에 상관없이 저장이 된다. 그래서 배열처럼 순서대로 index로 접근하는게 아니라 key로 데이터에 접근한다. 키는 마치 특정 값을 갖고 있는 변수 같은 역할을 해서, 해당 키로 프로퍼티에 어떤 값이 저장되었는지 알 수 있다.]]></description><link>https://rimuuu.github.io/posts/object/200508/</link><guid isPermaLink="false">https://rimuuu.github.io/posts/object/200508/</guid><pubDate>Fri, 08 May 2020 01:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;object-객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#object-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;object 객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object (객체)&lt;/h2&gt;
&lt;p&gt;객체는 키(key)-값(value) 쌍으로된 데이터의 모음으로, 순서에 상관없이 저장이 된다. 그래서 배열처럼 순서대로 index로 접근하는게 아니라 key로 데이터에 접근한다.
키는 마치 특정 값을 갖고 있는 변수 같은 역할을 해서, 해당 키로 프로퍼티에 어떤 값이 저장되었는지 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/d36da375-bcf2-4a14-b45e-06ec7bc8bf53/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%205.53.07.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  let plan1 = {
  name: &amp;quot;Basic&amp;quot;,
  price: 3.99,
  space: 100,
  transfer: 1000,
  pages: 10
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체의 키에는 스페이스, 한글, 특수문자 등이 들어갈 수 있는데 이건 변수를 선언할 때는 할 수 없던 표현이다.
color와 같이 특수문자가 없는 문자열의 경우 따옴표를 생략하고 쓸 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; difficult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;my name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;boong&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;silver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  키&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;한글인 키는 따옴표가 없어도 되는군!!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;!키&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;느낌표 있는 키는 따옴표가 필요하군&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  $special&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;$는 없어도 되는군&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;객체-접근하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;객체 접근하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 접근하기&lt;/h2&gt;
&lt;p&gt;객체에서 제일 중요한건 접근하는방법을 가장 잘 정리해두는것이다.
백엔드에서 데이터가 올때 복잡한 형식으로 되어 있는데 이걸 잘 접근할 줄 알아야한다.&lt;/p&gt;
&lt;p&gt;1.마침표(.)를 사용하여 &lt;code class=&quot;language-text&quot;&gt;객체명.프로퍼티명&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.대괄호([ ])를 사용하여 &lt;code class=&quot;language-text&quot;&gt;객체명[&amp;quot;프로퍼티명&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;대괄호-접근만-써야할때&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EA%B4%84%ED%98%B8-%EC%A0%91%EA%B7%BC%EB%A7%8C-%EC%8D%A8%EC%95%BC%ED%95%A0%EB%95%8C&quot; aria-label=&quot;대괄호 접근만 써야할때 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대괄호 접근만 써야할때&lt;/h4&gt;
&lt;p&gt;객체에서 dot(.)으로 접근하는 것이 제일 편하지만 몇가지 경우에서는 대괄호 접근만 써야한다.&lt;/p&gt;
&lt;p&gt;1.변수로 선언한 프로퍼티명을 이용해서 접근할때&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; plan1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Basic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; propertyName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;plan1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;propertyName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//&quot;Basic&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.프로퍼티명에 띄어쓰기가 있을때&lt;/p&gt;
&lt;p&gt;3.프로퍼티명이 숫자일때&lt;/p&gt;
&lt;p&gt;4.그외 JavaScript에서 식별자로 허용되지 않는 문자가 들어간 프로퍼티명을 사용했을때&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&quot;중첩된-객체-접근하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EC%B2%A9%EB%90%9C-%EA%B0%9D%EC%B2%B4-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;중첩된 객체 접근하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중첩된 객체 접근하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; myProfile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;김개발&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  address&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;geabal@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    home&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;위워크&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;my favorite&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    food&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;샐러드&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        price&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;삼겹살&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        price&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    hobby&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;축구&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 객체에서 ‘샐러드’라는 값에 접근하려면?
&lt;code class=&quot;language-text&quot;&gt;myProfile[&amp;#39;my favorite&amp;#39;][&amp;#39;food&amp;#39;][0][&amp;#39;name&amp;#39;]&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;정의된-객체에서-프로퍼티값-수정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EA%B0%92-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;정의된 객체에서 프로퍼티값 수정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정의된 객체에서 프로퍼티값 수정하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; myObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  property1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  property2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  property3&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    childproperty&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;property1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

myObj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myObj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//  [&quot;hi&quot;, &quot;hello&quot;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;정의된-객체에서-새로운-프로퍼티-추가하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EB%90%9C-%EA%B0%9D%EC%B2%B4%EC%97%90%EC%84%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0&quot; aria-label=&quot;정의된 객체에서 새로운 프로퍼티 추가하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정의된 객체에서 새로운 프로퍼티 추가하기&lt;/h4&gt;
&lt;p&gt;객체의 큰 특징 중 하나는 이미 프로퍼티명(키)이 존재하는데 다시 한 번 할당하면 값이 교체(수정)된다. 그리고 해당 프로퍼티가 존재하지 않으면 새로운 프로퍼티를 추가한다. 이 특징의 근본적인 이유는 바로 밑에서 등장한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;myObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;property3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;siblingproperty &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*결과: myObj = {
  property1: &quot;hello&quot;,
  property2: [1,2,3,4,5],
  property3: {
    childproperty: &quot;haha&quot;
    siblingproperty:
  },
};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;객체의-특별한-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%8A%B9%EB%B3%84%ED%95%9C-%EC%A0%90&quot; aria-label=&quot;객체의 특별한 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 특별한 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;“객체는 reference가 저장된다”&lt;/strong&gt;
객체를 변수에 저장하면 객체 리터럴 자체가 저장 되는게 아니라, 사실은 reference가 저장된다. 아래 예시를 보면 객체에 똑같은 데이터를 할당하고 그 값을 비교했는데 결과가 false라고 출력된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hiObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; helloObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;안녕&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;객체비교 =&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hiObj &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; helloObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//객체비교 =&gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 이유는 객체는 변수에 저장할때, 그 객체 자체를 그대로 저장하는것이 아니라, 객체가 담긴 어떤 메모리의 reference를 저장한다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/01d56eaa-eef7-433c-b618-b98f6bc960cd/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.35.12.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그래서 hiObj가 갖고 있는 진짜 값은 메모리 주소인 reference 인 것.
하지만 hiObj를 불러올 때 메모리 주소를 반환하는 것이 아니라 해당 메모리에 저장된 데이터를 반환해준다.&lt;/p&gt;
&lt;p&gt;그래서 눈에 보이는 데이터는 똑같지만, hiObj와 helloObj가 갖고 있는 진짜 값은 다르다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;객체비교 =&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hiObj &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; helloObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//객체비교 =&gt; false&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;객체값비교 =&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hiObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; helloObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//객체값비교 =&gt; true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그래서 const로 선언한 객체에 새로운 객체를 할당하면 오류가 나지만
(새로운 메모리 레퍼런스로 수정을 시도하기 때문), 프로퍼티로 접근해서 얼마든지 수정할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;객체의-키를-변수로-접근하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%82%A4%EB%A5%BC-%EB%B3%80%EC%88%98%EB%A1%9C-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;객체의 키를 변수로 접근하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 키를 변수로 접근하기&lt;/h2&gt;
&lt;p&gt;객체의 프로퍼티명(키)를 사용하는 방법은 다양한 방식으로 활용할 수 있다.
information이라는 객체를 하나 만들어서 생각해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; information &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;김개발&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그런데 여기에 키 하나를 생성하고, 그 키에 값을 할당해주려고 한다.
그런데 키와 값을 변수를 통해 받아오고싶다면 어떻게 해야할까?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/bc6006af-a0b4-46a9-8cdc-0a84d3a108b6/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.09.39.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;변수 verb의 값을 객체의 새로운 키, 그리고 변수 project의 값을 새로생성할 키의 값으로 사용한다고 했을때 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/e733ff85-aede-4254-80f7-7023ab57d173/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.09.58.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;변수명 자체를 대괄호접근법을 이용해서 객체에 새로운 키와 값을 할당해준것이다. 키와 값이 잘 생성되었는지 확인해보기 위해 information 객체를 보니 잘 추가가 되었다.&lt;/p&gt;
&lt;h2 id=&quot;객체-순회하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%88%9C%ED%9A%8C%ED%95%98%EA%B8%B0&quot; aria-label=&quot;객체 순회하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 순회하기&lt;/h2&gt;
&lt;p&gt;객체는 순서가 없고 키를 통해서만 접근이 가능하기 때문에 요소 하나하나에 접근하여 순회하고 싶을때 배열과 달리 어려울거라고 생각할 수 있다. 하지만 객체의 특성을 이용해서 순회를 할 수 있는데 크게 두가지 방법이 있다.&lt;/p&gt;
&lt;h3 id=&quot;1-objectkeys-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-objectkeys-&quot; aria-label=&quot;1 objectkeys  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Object.keys( )&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Object.keys()&lt;/code&gt; 메서드는 어떤 객체가 가지고 있는 키들의 목록을 배열로 리턴하는 메서드이다. 객체의 내장 메서드가 아니라 객체 생성자인 Object가 직접 가지고 있는 메서드이다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/0b6f86d4-00d3-4d70-a032-d103c9f8187c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.28.37.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Object.keys()&lt;/code&gt;가 리턴하는 값은 배열이기 때문에 이걸로 우리가 반복문을 사용할 수 있다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/71dc123c-20fe-43f0-84d4-1b19316a3541/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.37.05.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;ES6 문법에서는 이 외에도 Object 생성자의 메서드인 &lt;code class=&quot;language-text&quot;&gt;Object.values&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Object.entries&lt;/code&gt;가 추가 되어서 유용하게 사용할 수 있게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;objectvalues&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#objectvalues&quot; aria-label=&quot;objectvalues permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object.values()&lt;/h3&gt;
&lt;p&gt;객체의 값들로 이루어진 배열을 리턴한다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/7f857377-48c6-458c-bd1a-a9542f82e6ba/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.45.35.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;objectentries&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#objectentries&quot; aria-label=&quot;objectentries permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object.entries()&lt;/h3&gt;
&lt;p&gt;객체의 키와 값의 쌍으로 이루어진 길이 2짜리 배열로 이루어진 배열을 리턴한다. 각 배열에서 인덱스[0]의 값은 키를, 인덱스[1]의 값은 키에 해당하는 값들을 가지게 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/ba19b689-91de-448e-8e84-99387374d8b5/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.48.06.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-for---in&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-for---in&quot; aria-label=&quot;2 for   in permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. for - in&lt;/h3&gt;
&lt;p&gt;객체를 순회하는 두번째 방법은 for-in문이다. 반복문 for문과 같은 종류의 문법이지만 객체와 배열을 위해 특별히 존재하는 ES6에서 추가된 문법이다.
기존의 배열에서 사용하던 for문을 (let i = 0 ; i &amp;#x3C; arr.length; i++)를 간단하게 축약한 문법&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/239e6a61-7752-4644-8e2c-13db5528df5d/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.52.36.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;그럼 이 for-in문을 객체에서 어떻게 사용할 수 있는지 알아보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/493974e1-2d16-4539-89da-f239ba61e54b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.56.39.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 객체를 가지고 for-in문을 사용하면, 인덱스에 해당하는 변수가 숫자가 아닌 객체의 각각의 키를 할당받게 된다!
객체의 키를 변수로 접근하는 기능과 함께 사용해서 아주 신박한 기능이다.
(이거에 대해 알게 되고 진짜 소오오오름이 돋았다…)&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;객체의-키에-변수로-접근--반복문을-이용하는-예제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%82%A4%EC%97%90-%EB%B3%80%EC%88%98%EB%A1%9C-%EC%A0%91%EA%B7%BC--%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%8A%94-%EC%98%88%EC%A0%9C&quot; aria-label=&quot;객체의 키에 변수로 접근  반복문을 이용하는 예제 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 키에 변수로 접근 + 반복문을 이용하는 예제&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;getExamResult 함수를 구현해주세요&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
인자 scores 는 다음과 같은 객체입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
객체의 요소의 갯수 및 키의 이름들은 달라질 수 있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
객체의 값은 다음 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;가지 문자열 중에서 하나를 가지고 있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;A+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;F&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;생활속의회계&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;논리적글쓰기&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;독일문화의이해&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;B+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;기초수학&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;D+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;영어회화&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;C+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;인지발달심리학&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;A+&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

인자 requiredClasses 는 다음과 같이 문자열로 된 배열입니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;영어회화&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;기초수학&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;공학수학&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;컴퓨터과학개론&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
다음 조건을 만족하는 객체를 리턴하도록 함수를 구현해주세요

&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt; scores 객체가 가지고 있는 키들은 새로운 객체에 포함되어야 합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
   단&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 그 값들은 다음 원리에 따라 숫자로 바뀌어 할당되어야 합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
   &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4.5&lt;/span&gt;
   &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
   &lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.5&lt;/span&gt;
   &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
   &lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.5&lt;/span&gt;
   &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
   &lt;span class=&quot;token constant&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.5&lt;/span&gt;
   &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;D&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
   &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;F&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt; requiredClass 배열의 요소로는 존재하지만&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scores의 키로는 존재하지 않는 항목이 있다면&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   해당 요소는 새로운 객체의 키가 되고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 값으로 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;을 가져야 합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
   위에서 예시로 묘사된 객체와 배열이 인자로 들어왔다면&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   다음과 같은 객체과 리턴됩니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;요소간 순서는 다를수 있지만&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 채점에 무관합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;생활속의회계&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;논리적글쓰기&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;독일문화의이해&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;기초수학&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;영어회화&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;인지발달심리학&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;공학수학&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;컴퓨터과학개론&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/5b9b372a-1bc5-4d11-8f28-57853b70a9b4/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-25%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.20.48.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;이글은 Wecode 부트캠프의 소중한 공부자료를 보고 정리한 내용입니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[React Basis] Component Life Cycle API]]></title><description><![CDATA[모든 Componenent들은 life cycle이라는 api를 가지는데, 이는 기본적으로 react가 component를 생성하고, 업데이트하고, 제거할 때 호출할 수 있는 함수들을 말한다.]]></description><link>https://rimuuu.github.io/posts/react/200507/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200507/2</guid><pubDate>Thu, 07 May 2020 05:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;component-life-cycle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#component-life-cycle&quot; aria-label=&quot;component life cycle permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Component Life Cycle&lt;/h2&gt;
&lt;p&gt;앞서 살펴 봤던 Class Component에서 가장 많이 사용되는 method는 render()지만 사실 react component는 단순히 render 말고 더 많은 걸 갖고 있다.
모든 Componenent들은 &lt;code class=&quot;language-text&quot;&gt;life cycle method&lt;/code&gt;를 가지는데, life cycle method는 기본적으로 react가 component를 생성하고 없애는 방법이다.&lt;/p&gt;
&lt;p&gt;예를 들어서, 앞서 봤던 예시에서 add라는 버튼을 눌러서 component가 업데이트될때 호출되는 다른 function이 있다. 그 전부를 들여다보진 않을거고, 우리가 필요로하는 가장 중요한 것 위주로 살펴보겠다.&lt;/p&gt;
&lt;h3 id=&quot;1-mounting--컴포넌트-초기-생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-mounting--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B4%88%EA%B8%B0-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;1 mounting  컴포넌트 초기 생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Mounting : 컴포넌트 초기 생성&lt;/h3&gt;
&lt;p&gt;Mounting은 “태어나는 것”과 같다.
여기에 해당되는 주요한 함수들은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;constructor()&lt;/code&gt; &lt;br&gt;
컴포넌트 생성자 함수. 컴포넌트가 새로 만들어질때마다 이 함수가 호출되는데,
이 함수는 javascript class 개념에서 온 함수이다.
이 부분을 이해하기 위해서는 javascript에서 객체와 class에 대한 공부가 선행되어야 하는데 큰 일은 아니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; &lt;br&gt;
컴포넌트가 mount될때, 컴포넌트가 스크린에 표시될때, 컴포넌트가 웹사이트에 갈때
가장 먼저 실행되는 함수가 바로 constructor()이고, 그 다음 render()가 실행된다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidMount()&lt;/code&gt; &lt;br&gt;
컴포넌트가 render된 후 실행되는 함수.
“이봐, 이 컴포넌트는 처음 render됐어”라고 알려주는 녀석이다.
그래서 순서는 constructor() -&gt; render() -&gt; componentDidMount() 순이다.
주로 해당 컴포넌트에서 필요로하는 데이터를 요청하기 위해 axios, fetch등을 통하여 요청을 하는 작업을 진행할때 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-updating--컴포넌트-업데이트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-updating--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8&quot; aria-label=&quot;2 updating  컴포넌트 업데이트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Updating : 컴포넌트 업데이트&lt;/h3&gt;
&lt;p&gt;Updating은 언제 일어날까? 바로 나자신에 의해서다.
내가 render 함수 안에 정의해놓은 이벤트를 실행할때마다 component의 state가 업데이트되고 이게 바로 component cycle에서 update에 해당한다.&lt;/p&gt;
&lt;p&gt;여기에 해당되는 주요한 함수는 다음이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;render()&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate()&lt;/code&gt; &lt;br&gt;
이 api는 컴포넌틀를 최적화하는 작업에서 매우 유용하게 사용된다. 리액트는 변화가 발생하는 부분만 업데이트를 해줘서 효율적이라는 특징이 있는데, 변화가 발생한 부분만 감지해내기 위해서는 Virtual DOM에 한 번 그려줘야한다. 즉, 현재 컴포넌트 상태가 업데이트 되지 않아도 부모 컴포넌트가 리렌더링되면 자식들도 렌더링 된다. 물론 변화가 없으면 DOM은 조작하지 않게 되기 때문에 CPU를 엄청나게 사용하는 건 아니지만 어쨌든 낭비되는 CPU 처리량이 발생할 수 밖에 없다. 이 낭비를 줄이기 위해서 &lt;code class=&quot;language-text&quot;&gt;shouldComponentUpdate&lt;/code&gt;를 사용한다. 기본적으로는 true를 반환하고, 조건에 따라 false를 반환하면 해당 조건에서는 render 함수를 실행하지 않게 할 수 있다.&lt;/p&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentDidUpdate()&lt;/code&gt; &lt;br&gt;
componentDidUpdate()는 컴포넌트가 업데이트된 직후에 실행되는 함수이다.
그래서 setState()를 호출하면 먼저 render()가 실행되고, 업데이트가 완료되면 componentUpdate()가 실행되는 것이다. 이 시점에서는 this.prop과 this.state가 바뀌어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-unmounting--컴포넌트-제거&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-unmounting--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A0%9C%EA%B1%B0&quot; aria-label=&quot;3 unmounting  컴포넌트 제거 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Unmounting : 컴포넌트 제거&lt;/h3&gt;
&lt;p&gt;컴포넌트가 더이상 필요하지 않게 되었을때 컴포넌트를 죽게 할 수 있다.
어떻게 컴포넌트가 죽을까?
페이지를 바꿀때, 혹은 state를 이용해서 컴포넌트를 교체할 때 등. 컴포넌트를 제거하는데에는 다양한 방법이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;componentWillUnmount()&lt;/code&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 함수는 컴포넌트가 죽기 전에 실행되는 함수이다. 시뮬레이션을 통해 볼 수는 없지만 내가 컴포넌트를 생성하고 그 컴포넌트가 죽을때마다 호출할 수 있다. 주로 등록했던 이벤트를 제거하는 용도로 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 컴포넌트의 라이프사이클을 이용해서 내가 원하는대로 컴포넌트를 조작할 수 있게 되었다. 우왕ㅋ굳ㅋ&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;이 글은 velopert님의 &lt;a href=&quot;https://velopert.com/3631&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;리액트 튜토리얼&lt;/a&gt;, &lt;a href=&quot;https://academy.nomadcoders.co/courses/216871/lectures/10881303&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Nomad Coders Acacdemy&lt;/a&gt;의 강의를 참고하여 작성했습니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[React Basis] 컴포넌트를 만드는 두번째 방법: Class Component]]></title><description><![CDATA[리액트에서 컴포넌트를 만드는 방법은 크게 두가지로 나뉜다. 바로 `함수형 컴포넌트`와 `클래스형 컴포넌트`를 만드는 것인데 각각의 방법은 다루게 되는 데이터의 성질도 다르다.]]></description><link>https://rimuuu.github.io/posts/react/200507</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200507</guid><pubDate>Thu, 07 May 2020 04:12:03 GMT</pubDate><content:encoded>&lt;p&gt;리액트에서 컴포넌트를 만드는 방법은 크게 두가지로 나뉜다.
바로 &lt;code class=&quot;language-text&quot;&gt;함수형 컴포넌트&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;클래스형 컴포넌트&lt;/code&gt;를 만드는 것인데
각각의 방법은 다루게 되는 데이터의 성질도 다르다.&lt;/p&gt;
&lt;p&gt;함수형 컴포넌트는 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;를 데이터로 다루고, 클래스형 컴포넌트는 &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;를 데이터로 다룬다.
각각에 대해 짧게 설명하자면 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;는 부모 컴포넌트가 자식 컴포넌트에게 주는 값이다. 자식 컴포넌트에서는 props를 받아오기만 하고, 받아온 props를 직접 수정할 수는 없다. 단순히 데이터를 받아서 사용만 하는 목적이라면 함수형 컴포넌트를 만들어서 props를 데이터로 사용하면 된다.&lt;/p&gt;
&lt;p&gt;반면에 &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;는 컴포넌트 내부에서 선언하고 내부에서 동적으로 값을 변경할 수 있다. 뒤에서 배우게 될 Life Cycle API를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;사실 함수형 컴포넌트와 props는 처음에 리액트에서 컴포넌트를 만드는법을 다룰때 봤던 내용이라서 이번 포스팅에서는 클래스형 컴포넌트를 만드는 방법과 이 형태의 컴포넌트에서 데이터, 즉 state를 다루는법에 대해 주로 정리를 해보려고 한다.&lt;/p&gt;
&lt;h2 id=&quot;함수형-컴포넌트--클래스형-컴포넌트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8--%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8&quot; aria-label=&quot;함수형 컴포넌트  클래스형 컴포넌트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수형 컴포넌트 &amp;#x26; 클래스형 컴포넌트?&lt;/h2&gt;
&lt;p&gt;지금까지 우리가 배웠던 아래 같이 생긴 컴포넌트는 함수형 컴포넌트(function component)다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foodILike&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dish&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; picture&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dishi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그렇다면 class component는 어떻게 생겼을까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 단계가 바로 class component를 만들기 위해 필수적이다.
리액트 컴포넌트는 방대한 기능들을 담고 있는데 컴포넌트를 만들때마다 모든 기능을 다 가져와서 사용할 필요가 없기 때문에 &lt;code class=&quot;language-text&quot;&gt;extends&lt;/code&gt; 표현을 사용해서 필요로 하는 기능만 가져와서 사용하려고 하는 것이다. 그 중 하나가 지금부터 이야기할 state다.&lt;/p&gt;
&lt;p&gt;혹은 아래와 같은 방식으로도 extend 할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;클래스 컴포넌트와 리액트 컴포넌트에 대한 설명을 이해하기 쉽게 비유를 들어보자. &lt;br&gt;
baby는 human에서 확장(extend)되어 human의 특징을 그대로 가지게 된다.
samsung phone은 cell phone에서 확장되어 cell phone의 attributes들, 이를테면 screen, camera 등을 가지게 된다. 그리고 samsung phone은 iphone과 이 attributes들을 공유한다.&lt;/p&gt;
&lt;p&gt;이렇듯 App 클래스는 react 클래스 컴포넌트로부터 속성값들을 확장해서 가져오고 있다.
이때 주의할 점은 class component는 함수가 아니기 때문에 값을 return 하는 특징을 가지고 있는게 아니라 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;를 한다. 그리고 이 render method는 당연하게도 react component가 가지고 있기 때문에 여기서 확장된 App class component 역시 이 method를 사용할 수 있는것이다.&lt;/p&gt;
&lt;p&gt;정리해보면, &lt;code class=&quot;language-text&quot;&gt;function component&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt;이고 뭔가를 &lt;code class=&quot;language-text&quot;&gt;return&lt;/code&gt; 하여 화면에 표시해준다. 하지만 &lt;code class=&quot;language-text&quot;&gt;class component&lt;/code&gt;는 react component라는 가장 상위의 컴포넌트로 부터 &lt;code class=&quot;language-text&quot;&gt;확장(extend)&lt;/code&gt;된 컴포넌트인데 react가 실행되면 자동적으로 모든 class component의 &lt;code class=&quot;language-text&quot;&gt;render method&lt;/code&gt;가 실행된다.&lt;/p&gt;
&lt;h2 id=&quot;state-동적-데이터가-담기는-공간객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state-%EB%8F%99%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0%EA%B0%80-%EB%8B%B4%EA%B8%B0%EB%8A%94-%EA%B3%B5%EA%B0%84%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;state 동적 데이터가 담기는 공간객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State: 동적 데이터가 담기는 공간(객체)&lt;/h2&gt;
&lt;p&gt;그렇다면 왜 굳이 function component를 냅두고 class component라는 어려운 녀석을 이야기해야하는걸까? &lt;br&gt;
그 이유는 class component가 &lt;code class=&quot;language-text&quot;&gt;state&lt;/code&gt;라고 부르는 우리가 필요로 하는 개념을 갖고 있기 때문이다.&lt;/p&gt;
&lt;p&gt;state는 component의 데이터를 넣을 공간인 object이다.
그런데 여기서 말하는 데이터는 앞서 이야기했던 dynamic data, 즉 서버에서 받아오는 역동적인 데이터다.
그래서 state 안에 바뀌게 될 데이터를 넣고 이용하면 된다.
그리고 이 녀석은 객체이기 때문에 class component에서 사용하기 위해서는
&lt;code class=&quot;language-text&quot;&gt;{this.state.count}&lt;/code&gt; 이런 식으로 중괄호 안에 this 키워드를 사용해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; The number is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 입력하고 나면 화면에 state가 반영된 값이 화면에 출력된다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/4a2baa0b-5b69-4517-b33f-27590ad2e5bf/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-06%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%206.56.18.png&quot;&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;state를-이용해서-이벤트-걸기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B1%B8%EA%B8%B0&quot; aria-label=&quot;state를 이용해서 이벤트 걸기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;State를 이용해서 이벤트 걸기&lt;/h2&gt;
&lt;p&gt;그런데 여기서 문제는 App이라는 class component에서 데이터를 어떻게 바꿀 것인가이다.
state의 데이터를 역동적으로 만드는걸 배우기 위해, 먼저 클래스컴포넌트에서 이벤트를 실행하는것 부터 알아보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;minus&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;minus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The number is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Add&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minus&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Minus&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;자바스크립트였다면 &lt;code class=&quot;language-text&quot;&gt;addEventlistener&lt;/code&gt;를 이용해서 요소에 이벤트를 걸어줬겠지만 리액트에서는 좀 더 쉽게 이벤트를 걸 수 있다. &lt;code class=&quot;language-text&quot;&gt;onClick&lt;/code&gt;이벤트가 리액트에 기본적으로 내장되어 있어서,
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;button onClick={this.add}&amp;gt;add&amp;lt;/button&amp;gt;&lt;/code&gt;에 직접적으로 이벤트를 실행할 수 있다.
위의 코드를 실행하고 콘솔창을 보니 이벤트가 잘 걸린걸 알 수 있다.
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/d056c9ef-bd37-4cfe-9235-f462cfc7ef1e/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-05-06%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.12.31.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;state의-데이터를-동적으로-만들기--setstate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#state%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0--setstate&quot; aria-label=&quot;state의 데이터를 동적으로 만들기  setstate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;state의 데이터를 동적으로 만들기 : setState()&lt;/h2&gt;
&lt;p&gt;state를 사용할 때 주의할 점이 있다. 바로 state의 상태를 변경하고 싶을때 (여기 담긴 데이터의 값을 변경하고 싶을때) state를 직접적으로 변경하면 안된다는 것이다.
이렇게 시도하면 “Do not mutate state directly. Use setState()” 라는 무서운 경고를 받는다.&lt;/p&gt;
&lt;p&gt;그럼 어떻게 하냐고?
render function에서 바꿔줘야하는데, 이때 &lt;code class=&quot;language-text&quot;&gt;setState()&lt;/code&gt;라는 함수를 이용한다.
setState는 새로운 state를 취하게 해주는데 state는 객체이기 때문에 당연히 &lt;code class=&quot;language-text&quot;&gt;{ }&lt;/code&gt;안에 넣어줘야한다. 이렇게 입력하면 add라는 버튼을 누를때마다 count의 값이 1이 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이번에는 add를 클릭했을때 1 증가, minus를 클릭했을때 1이 감소하게 만들어보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function-variable function&quot;&gt;minus&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이게 가능한 원리는 리액트가 너무 똑똑해서 setState 함수를 호출하면 state를 업데이트하고 바로 render function을 호출한다. 그러면서 변화가 있는 부분만 변형해서 보여주는것이다.
이 원리는 앞서 말했던 virtual DOM을 이용하고 있는 건데, 리액트는 깜박이지도 않고 데이터를 업데이트해서 보여준다.&lt;/p&gt;
&lt;p&gt;하지만 참고로 이렇게 state에 의존하는 코드는 몇가지 성능문제를 갖고 있기 때문에 사실상 좋은 코드가 아니다. 그래서 this.state가 아니라 current라는 매개변수를 쓰는게 훨씬 더 효과적이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정리하자면, setState를 호출할때마다 react는 state를 업데이트하고 그 변경된 사항을 반영해서 화면을 render한다! 엄청 중요하니 얼굴에 타투를 하자 ⭐️
(by 니꼬 😂)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[React Basis] 컴포넌트에 정보를 전달하기 2  feat. Array.map( ) ]]></title><description><![CDATA[앞선 포스팅을 통해서 컴포넌트에 데이터를 전달하는 방법에 대해 알아봤다. 하지만 이걸로는 부족하다.  왜냐면 앞으로 동적 웹을 만들것이기 때문에 서버에서 받게 되는 데이터가 어떤것이 될지 모른다는 상태에서 코드를 짜야하는데...]]></description><link>https://rimuuu.github.io/posts/react/200505/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200505/2</guid><pubDate>Tue, 05 May 2020 05:12:03 GMT</pubDate><content:encoded>&lt;h3 id=&quot;dynamic-component-generation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dynamic-component-generation&quot; aria-label=&quot;dynamic component generation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dynamic Component Generation&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kimchi&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fried_chicken&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ramen&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞선 포스팅을 통해서 컴포넌트에 데이터를 전달하는 방법에 대해 알아봤다. 하지만 이걸로는 부족하다.  &lt;br&gt;
왜냐면 앞으로 동적 웹을 만들것이기 때문에 서버에서 받게 되는 데이터가 어떤것이 될지 모른다는 상태에서 코드를 짜야하는데, 앞서 봤던 내용은 단순히 데이터를 새로 추가하는 정도밖에 지나지 않았으니까 말이다.  흐규… &lt;/p&gt;
&lt;p&gt;그래서 이번 포스팅에서는 서버에서 데이터를 받는다는 가정을 하고,
어떤 데이터들을 받았을때 이걸 역동적으로 처리 할 수 있는 컴포넌트를 만들어보려고한다. 다음의 배열 데이터를 서버에서 받았다고 가정하고 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; foodILike &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;jjajangmyeon&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.maangchi.com/wp-content/uploads/2007/07/jjajangmyeonAugflickr-75x75.jpg&quot;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
   name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dduckbokki&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
   image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.maangchi.com/wp-content/uploads/2007/09/ddeokbokki_sizzle-75x75.jpg&quot;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fried-chicken&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.maangchi.com/wp-content/uploads/2014/01/fried-chicken_basket-75x75.jpg&quot;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kimchi-pancake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.maangchi.com/wp-content/uploads/2015/05/kimchi-pancake-75x75.jpg&quot;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 데이터를 통해 컴포넌트에서 object(객체)의 list를 어떻게 가져오는지 보게 될 건데, 그 방법은 바로 자바스크립트의 함수를 이용하는거다! &lt;br&gt;
사실 리액트는 자바스크립트이기 때문에 자바스크립트의 함수들을 그대로 사용할 수 있다. 이번 시간에 등장하는 함수는 &lt;code class=&quot;language-text&quot;&gt;Array.map()&lt;/code&gt;이다. 여기서 잠깐 개념을 정리하고 가자.&lt;/p&gt;
&lt;h3 id=&quot;arraymap-br&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#arraymap-br&quot; aria-label=&quot;arraymap br permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.map() &lt;br&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Array.map()&lt;/code&gt; 메서드는 배열 내의 모든 요소 각각에 대해 주어진 함수를 실행한 결과를 모아 새로운 배열을 반환한다. 배열 전체를 돌며 배열값을 사용해서 “또 다른 배열”을 만들고 싶을때 적합한데, 특히 원본 배열은 건들지 않고 그 값을 활용해서 새로운 배열을 만들어야 할 때 특히 유용하다. &lt;/p&gt;
&lt;p&gt;다음 예시를 보면 쉽게 이해할 수 있다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; friends &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;jiwon&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ho&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;jin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;garam&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 

friends&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;friend &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; good&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/81069017-405e4e80-8f1c-11ea-8d2b-3c4f05e1b5b9.png&quot; alt=&quot;주석 2020-05-05 220304&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;arraymap을-활용한-컴포넌트-만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#arraymap%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;arraymap을 활용한 컴포넌트 만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.map()을 활용한 컴포넌트 만들기&lt;/h3&gt;
&lt;p&gt;이제 이 map의 사용법을 알게 되었으니 배열을 활용해서 역동적으로 동작하는 컴포넌트를 만들어보자. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;foodILike&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dish&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dish&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; picture&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;dish&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드를 보면 foodILike라는 배열에 map 함수를 사용해서 각 요소마다 한번씩 돌아가는 함수를 실행시켰는데, 함수의 내용은 앞선 포스팅에서 배웠던 객체의 키로 접근하는 것과 크게 다르지 않다. &lt;br&gt;참고로 dish는 함수안에서 돌아가는 매개변수에 불과하다.&lt;/p&gt;
&lt;p&gt;정리하면, 배열의 각 요소에서 name이라는 키값과 image라는 키값에 접근한다는 내용이다.  주의할점은 이 결과를 리액트는 객체로 리턴하기 때문에 객체 리터럴 &lt;code class=&quot;language-text&quot;&gt;{ }&lt;/code&gt;을 사용한다는 것이다. 객체 리터럴을 안쓰면 그냥 문자열이다 ~.~&lt;/p&gt;
&lt;p&gt;그럼 이제 컴포넌트를 보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; picture&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; like &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;picture&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 결과 실행된 화면을 보면, 리액트가 주어진 데이터에 반응하여 역동적으로 화면을 만들었다는걸 알 수 있다. &lt;br&gt;
잘했어 리액트~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/81071205-51f52580-8f1f-11ea-93b1-2334623fcdcd.png&quot; alt=&quot;주석 2020-05-05 221445&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[React Basis] 컴포넌트에 정보를 전달하기 1 ]]></title><description><![CDATA[`자 이제 시작이야~ 본격적인 리액트의 세계 속으로!`  지난 포스팅에서 리액트의 특징 몇가지와 컴포넌트를 만드는 법에 대해 알아봤다. 이번에는 단순히 같은 내용의 컴포넌트를 찍어내는게 아니라 내가 원하는 데이터에 따라 언제든지 다른 내용을 찍어내는 컴포넌트를 만들어보려고 한다.  ]]></description><link>https://rimuuu.github.io/posts/react/200505</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200505</guid><pubDate>Tue, 05 May 2020 04:12:03 GMT</pubDate><content:encoded>&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;자 이제 시작이야~&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;본격적인 리액트의 세계 속으로!&lt;/code&gt;
지난 포스팅에서 리액트의 특징 몇가지와 컴포넌트를 만드는 법에 대해 알아봤다. 이번에는 단순히 같은 내용의 컴포넌트를 찍어내는게 아니라,
내가 원하는 데이터에 따라 언제든지 다른 내용을 찍어내는 컴포넌트를 만들어보려고 한다. &lt;/p&gt;
&lt;h2 id=&quot;컴포넌트--컴포넌트-데이터-전달하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8--%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;컴포넌트  컴포넌트 데이터 전달하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트  컴포넌트, 데이터 전달하기&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;핵심:  JSX에서는 컴포넌트에서 컴포넌트로 정보를 보낼 수 있다. &lt;/strong&gt; &lt;br&gt;
리액트가 멋진 이유는 이렇게 재사용 가능한 컴포넌트를 만들 수 있다는 점이다.
그럼 이제 본격적으로 컴포넌트에서 어떻게 데이터를 전달하는지 알아보겠다.&lt;/p&gt;
&lt;h3 id=&quot;basis&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#basis&quot; aria-label=&quot;basis permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basis&lt;/h3&gt;
&lt;p&gt;컴포넌트에 정보를 보낼때는 html에 속성값을 주는것과 굉장히 비슷한 모양을 하고 있다.   &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Food name=&amp;quot;kimchi&amp;quot; /&amp;gt;&lt;/code&gt; &lt;br&gt;
이 방식을 구체적으로 말하면 ‘Food component에 kimchi라는 value로 property name을 줬다’고 할 수 있다.&lt;/p&gt;
&lt;p&gt;이 값은 문자열뿐만 아니라 불리언, 객체, 배열 등 모든 데이터타입을 넣을 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kimchi&quot;&lt;/span&gt;
             something&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
             papapapa&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 한 상태에서 누군가가 Food컴포넌트로 정보를 보내려고 하면, 리액트는 이 모든 키값들을 가져온다. 그리고 food 컴포넌트의 인자(argument)로 그것들을 넣는다. 실제로 인자로 받는 값을 콘솔에 찍어보면 컴포넌트에서 받고 있는 모든 데이터들이 나오고 object에 담겨있는걸 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/81065757-10f91300-8f17-11ea-823a-cda5eb3075ba.png&quot; alt=&quot;React App - Chrome 2020-05-05 오후 8_51_28&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; like potato&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kimchi&quot;&lt;/span&gt; something&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; papapapa&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 데이터들이 객체이기 때문에 객체안에 담긴 키를 인자로 전달하고, 그 인자를 받게끔 함수를 만들면 내가 원하는 데이터를 반환하는 컴포넌트를 만들수 있다.&lt;/p&gt;
&lt;p&gt;혹은 객체 리터럴 안에 키(프로퍼티명)을 사용하는 방식 &lt;code class=&quot;language-text&quot;&gt;{ favorite }&lt;/code&gt; 도 동일한 결과를 얻을 수 있다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;favorite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello world&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//결과 kimchi 출력 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그래서 이 특징을 이용해서 앞서 봤던 Food 컴포넌트가 받게 되는 데이터에 따라 리턴하는 문장의 내용을 바꾸게 만들어보자. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Food&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; favorite&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; like &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;favorite&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kimchi&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fried_chicken&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Food favorite&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dduckbokki&quot;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/81064992-a8f5fd00-8f15-11ea-88be-74439a6dc3bf.png&quot; alt=&quot;React App - Chrome 2020-05-05 오후 9_14_43&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 결과 내가 넣은 키값에 반응하는 컴포넌트가 만들어졌다~
완전 멋쪄… 리액트 이녀석… &lt;/p&gt;</content:encoded></item><item><title><![CDATA[[React Basis] 안녕, 리액트? + 컴포넌트를 만드는 첫번째 방법: Function Component]]></title><description><![CDATA[리액트는 페이스북과 인스타그램에서 사용자 경험을 향상하기 위해 만든 라이브러리로, 브라우저가 동적으로 기능할 때 서버에서 코드를 받아 다시 렌더링해야되는 문제(server side rendering)를 해결하기 위해 만들어졌다.]]></description><link>https://rimuuu.github.io/posts/react/200504/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200504/2</guid><pubDate>Mon, 04 May 2020 05:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;리액트reactjs를-알아보자구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8reactjs%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90%EA%B5%AC&quot; aria-label=&quot;리액트reactjs를 알아보자구 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리액트(react.js)를 알아보자구~&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/81028739-a667b900-8ebd-11ea-8a45-8e767be62efc.png&quot; alt=&quot;react_graph&quot;&gt;&lt;/p&gt;
&lt;p&gt;리액트는 페이스북과 인스타그램에서 사용자 경험을 향상하기 위해 만든 라이브러리로, 브라우저가 동적으로 기능할 때 서버에서 코드를 받아 다시 렌더링해야되는 문제(server side rendering)를 해결하기 위해 만들어졌다.
방대한 자료와 유연함이라는 장점 때문에 최근 몇년 간 가장 인기 있는 프론트엔드 프레임워크 자리를 지키고 있다.&lt;/p&gt;
&lt;h2 id=&quot;리액트의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;리액트의 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리액트의 특징&lt;/h2&gt;
&lt;h3 id=&quot;컴포넌트-기반의-화면-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B8%B0%EB%B0%98%EC%9D%98-%ED%99%94%EB%A9%B4-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;컴포넌트 기반의 화면 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트 기반의 화면 구성&lt;/h3&gt;
&lt;p&gt;리액트는 화면의 한 부분을 &lt;code class=&quot;language-text&quot;&gt;컴포넌트&lt;/code&gt; 라는 단위로 나누어서 독립적으로 관리할 수 있게 한다. 규모가 큰 프로젝트에서 코드를 기능별로 컴포넌트화하면 코드를 관리하기 쉽고 반복되는 부분을 대체할 수 있게 해주어서 &lt;code class=&quot;language-text&quot;&gt;코드 재사용성&lt;/code&gt;을 높여준다. 또 컴포넌트 기반의 화면을 구성을 하면 빠르고 효율적으로 화면을 구성할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;jsx-템플릿을-사용하지-않는다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jsx-%ED%85%9C%ED%94%8C%EB%A6%BF%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4&quot; aria-label=&quot;jsx 템플릿을 사용하지 않는다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSX: 템플릿을 사용하지 않는다.&lt;/h3&gt;
&lt;p&gt;JSX는 리액트에서 커스텀한 자바스크립트 확장 문법인데, 자바스크립트에서 html과 자바스크립트 변수, 속성 값을 사용하게 해준다.
별도의 템플릿은 사용하지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;virtual-dom-전체-dom을-다시-그리지-않는다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#virtual-dom-%EC%A0%84%EC%B2%B4-dom%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EA%B7%B8%EB%A6%AC%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4&quot; aria-label=&quot;virtual dom 전체 dom을 다시 그리지 않는다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Virtual DOM: 전체 DOM을 다시 그리지 않는다.&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Virtual DOM&lt;/code&gt;은 가상의 DOM이다. 어떤 변화가 일어나면, 실제로 브라우저의 DOM 에 새로운걸 넣는것이 아니라, 자바스크립트로 이뤄진 가상 DOM 에 한번 렌더링을 하고, 기존의 DOM 과 비교를 한 다음에 정말 변화가 필요한 곳에만 업데이트를 해주는 것이다.&lt;/p&gt;
&lt;p&gt;기존의 자바스크립트 DOM을 이용한 방식은 매번 DOM전체를 직접 접근하여 변화가 있을때마다 html/css/js파일 전체를 다시 리랜더링 하기 때문에 느려질 수 밖에 없었다. 하지만 리액트는 가상DOM을 이용해서 더욱 효과적으로 화면 렌더링을 할 수 있게 만들었다.&lt;/p&gt;
&lt;h2 id=&quot;그래서-리액트-어떻게-쓰냐구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EB%83%90%EA%B5%AC&quot; aria-label=&quot;그래서 리액트 어떻게 쓰냐구 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서, 리액트 어떻게 쓰냐구?&lt;/h2&gt;
&lt;h3 id=&quot;react-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react-components&quot; aria-label=&quot;react components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React Components&lt;/h3&gt;
&lt;p&gt;컴포넌트는 기본적으로 html을 반환(return)하는 함수인데, 리액트는 기본적으로 컴포넌트와 함께 동작한다. 모든것은 컴포넌트.
이제부터 리액트를 쓰는 모든 과정은 컴포넌트를 만들고, 컴포넌트가 예뻐보이게 만들거고, 컴포넌트가 데이터를 보여주게 하는 과정이 될 거다.
&lt;code class=&quot;language-text&quot;&gt;이제 컴포넌트는 너가 새롭게 제일 좋아하는 단어가 될 것~&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-do-we-make-components-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-we-make-components-&quot; aria-label=&quot;how do we make components  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do we make components ?&lt;/h3&gt;
&lt;p&gt;1 .js파일 하나를 생성한다.
그리고 반드시 react를 임포트 해줘야한다. 그렇지 않으면 리액트는 이 파일에서 jsx가 있는 컴포넌트를 사용한다는걸 인식하지 못한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;대문자로 시작하는 이름의 함수를 만들고 실행내용으로 원하는 html 태그를 입력한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Potato&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; love potato&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;export한다.
이렇게만 하고 마치면 vscode에서 해당값이 선언되었지만 아직 읽히지 않았다고 알려준다.
아직 export를 하지 않았기 때문!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; Potato&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-do-we-use-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-we-use-components&quot; aria-label=&quot;how do we use components permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do we use components?&lt;/h3&gt;
&lt;p&gt;컴포넌트를 만들고 실행하고 싶을때는 다음과 같은 처음 보는 모양새를 갖는다.
&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Potato /&amp;gt;&lt;/code&gt;
리액트 고유의 문법이라서 꼭 이렇게 지켜줘야지 html이 정해진 함수 내용으로 반환된다.
javascript안에 html 구조가 있는 이러한 조합의 구조를 &lt;code class=&quot;language-text&quot;&gt;jsx&lt;/code&gt;라고 부른다.
이건 리액트에서 나온 매우 커스텀한 유일한 개념이고 나머지는 javascript에서 배우는 문법을 그대로 가져간다. (variables, array, classes, map…)&lt;/p&gt;
&lt;p&gt;자 이제 함수를 사용하면 되는데, 어떻게 사용할 수 있을까?&lt;/p&gt;
&lt;h4 id=&quot;핵심-하나의-앱에서-하나의-컴포넌트만-렌더링-가능하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B5%EC%8B%AC-%ED%95%98%EB%82%98%EC%9D%98-%EC%95%B1%EC%97%90%EC%84%9C-%ED%95%98%EB%82%98%EC%9D%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A7%8C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4&quot; aria-label=&quot;핵심 하나의 앱에서 하나의 컴포넌트만 렌더링 가능하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핵심: 하나의 앱에서 하나의 컴포넌트만 렌더링 가능하다.&lt;/h4&gt;
&lt;p&gt;반드시 알아둬야할 건 리액트는 &lt;code class=&quot;language-text&quot;&gt;하나의 앱에서 단 하나의 컴포넌트만 렌더링 할 수 있다&lt;/code&gt;는 것이다.
그래서 이미 렌더링한 컴포넌트가 있다면, 그 컴포넌트 안에 내가 새로만든 컴포넌트를 임포트에서 사용해야한다.&lt;/p&gt;
&lt;p&gt;app.js 파일안에 있는 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; 컴포넌트안에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;Potato /&amp;gt;&lt;/code&gt;를 임포트 해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Potato &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Potato&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Potato&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I love potato&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Hello &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Potato &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 여기서 &lt;code class=&quot;language-text&quot;&gt;. /&lt;/code&gt;은 같은 디렉토리라는 뜻이다. &lt;code class=&quot;language-text&quot;&gt;Potato.js&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;App.js&lt;/code&gt;가 같은 디렉토리 안에 있기 때문에 임포트할때 저렇게 적어주는 것이다.&lt;/p&gt;
&lt;p&gt;그리고 내가 원하는 위치에서 &lt;code class=&quot;language-text&quot;&gt;Potato&lt;/code&gt; 컴포넌트를 사용해주면 끝이다.
다음 포스팅에서는 본격적으로 컴포넌트에 데이터를 전달하는 방법에 대해 알아보겠다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://blog.gaerae.com/2016/04/hello-react.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;개발자스럽다&lt;/a&gt;&lt;/em&gt;
&lt;br&gt;
&lt;em&gt;&lt;a href=&quot;https://academy.nomadcoders.co/courses/enrolled/216871&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;NomadCoderAcademy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Web] SPA(Single Page Application)? 프론트엔드 웹 프레임워크? ]]></title><description><![CDATA[최근 몇년 간 프론트엔드 개발에 있어서 빠지지 않는 중요한 웹프레임워크로 자리잡은 게 있다면 바로 리액트다. 모두가 다 '리액트, 리액트' 말하지만 먼저 선행되어야 할 건 어째서 이런 리액트같은 프레임워크가 등장하게 되었고 왜 필요한지에 대한 이해일거다.]]></description><link>https://rimuuu.github.io/posts/react/200504</link><guid isPermaLink="false">https://rimuuu.github.io/posts/react/200504</guid><pubDate>Mon, 04 May 2020 04:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;why-spa-framework&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-spa-framework&quot; aria-label=&quot;why spa framework permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why SPA Framework?&lt;/h2&gt;
&lt;p&gt;최근 몇년 간 프론트엔드 개발에 있어서 빠지지 않는 중요한 웹프레임워크로 자리잡은 게 있다면 바로 리액트다. 모두가 다 ‘리액트, 리액트’ 말하지만 먼저 선행되어야 할 건 어째서 이런 리액트같은 프레임워크가 등장하게 되었고 왜 필요한지에 대한 이해일거다. 그래서 이번 포스팅을 통해 리액트같은 SPA 프레임워크가 등장하게 된 과정에 대해 정리해보려고 한다. &lt;/p&gt;
&lt;h2 id=&quot;spa-single-page-application이-등장하게-되기까지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spa-single-page-application%EC%9D%B4-%EB%93%B1%EC%9E%A5%ED%95%98%EA%B2%8C-%EB%90%98%EA%B8%B0%EA%B9%8C%EC%A7%80&quot; aria-label=&quot;spa single page application이 등장하게 되기까지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SPA (Single Page Application)이 등장하게 되기까지&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;once upon a time......&lt;/code&gt; 👨‍🦳👸🤴
과거에는 서버와 통신해서 사이트 화면에 뭔가 변화를 주려면 페이지를 통째로 리로드 해야했다 (Server-Side Rendering). 즉 어떤 웹사이트에 접속이 들어오면 데이터베이스에서 정보들을 찾아서 그걸로 html/css/js를 렌더링하고 이걸 pc에 보내주는 작업을 웹사이트에서 작은 변화를 줄 때마다 해야 했던 것이다. 당연히 웹사이트의 렌더링 속도가 굉장히 느릴 수밖에 없었다.&lt;/p&gt;
&lt;p&gt;다행히 ajax라는 기술이 나온 이후로는 http 통신으로 데이터를 전송하고 결과를 받아와서
‘사이트의 이 부분을 이렇게 변경해라’ 하고 자바스크립트로 명령을 줄 수 있게 되었다. 하지만 이걸 일일이 프로그래밍 해야한다는 불편함이 있었다.&lt;/p&gt;
&lt;p&gt;그러다 심지어 &lt;code class=&quot;language-text&quot;&gt;모바일시대&lt;/code&gt;가 열리게 되었으니… 예전에 어떤 서비스를 위해 웹사이트 하나만 만들면 되었던 것에서 pc용 웹사이트 뿐만 아니라 모바일용 웹사이트, 그리고 아이폰과 안드로이드용 앱과 서버까지 개발해야하게 되었다.&lt;/p&gt;
&lt;p&gt;이 많은 작업을 효율적으로 진행하기 위해 웹개발은 분업을 고려할 수 밖에 없었다. 이 때 모바일쪽에서는 안드로이드와 ios의 자체적인 sw 시스템이 있어서 서버로부터 데이터만 전송받으면 언제든 화면이 보여질 수 있었다. 만약 웹에서도 그게 가능하다면, &lt;strong&gt;즉 서버에서 데이터만 보내줘도 이걸 브라우저에서 html/css/js로 렌더링해낼 수 있다면?&lt;/strong&gt; 서버는 어디서 정보를 요청하든 동일한 작업을 수행해서 데이터를 전송하면 될 것이다. 서버 개발자가 이 일에만 집중할 수 있게 되고, user interface쪽을 담당하는 개발자는 화면 개발에 집중할 수 있게 되는 것이다.
웹사이트 개발을 이렇게 사용자 컴퓨터의 브라우저에서 돌아가는 &lt;code class=&quot;language-text&quot;&gt;프론트엔드&lt;/code&gt;와 서버에서 돌아가는 &lt;code class=&quot;language-text&quot;&gt;백엔드&lt;/code&gt;로 분리하는 것이다. 그리고 이걸 가능하게 할 수 있는건 브라우저에서도 동작하는 자바스트립트의 강력한 라이브러리나 프레임워크를 만들면서 이루어질 수 있게 된 것이다. 그렇게 자바스크립트의 프론트엔드 프레임워크 3대장 React, Vue, Angular가 등장하게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;spasingle-page-application의-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#spasingle-page-application%EC%9D%98-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;spasingle page application의 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SPA(Single Page Application)의 원리&lt;/h2&gt;
&lt;p&gt;기존의 정적 웹이 진열된 웹페이지를 들고가는 편의점, 그리고 동적웹은 그때그때 웹페이지를 요리해주는 식당에 비유한다면 spa는 종업원들이 고기와 쌈재료를 가져다주면 손님이 직접 고기를 구워먹는 고기집이라고 생각하면 쉽다.&lt;/p&gt;
&lt;p&gt;서버는 정적웹처럼 html,css,js로 된 코드들을 브라우저에 전송해는데, 여기서 자바스크립트 코드는 아주 기똥찬 기능을 수행한다. 바로, 주어진 데이터에 따라 html 웹페이지를 렌더링하는건데 기존에 동적 웹에서 서버가 하던 일을 이제는 사용자의 컴퓨터에서 브라우저가 해내는거다.
SPA는 서버에서 데이터를 받아와야 할 때마다, 요청을 보내서 반환된 데이터로 사이트 내용을 갱신한다. 이렇게 되면 사이트에서 뭘 할 때마다 새로 접속하지 않고 한번 로드된 화면에서 많은 기능을 수행할 수 있게 된다. 그래서 &lt;code class=&quot;language-text&quot;&gt;single page application&lt;/code&gt;이라고 불리우는 것이다.
세 프레임워크의 방식은 각각 다르지만 기본 아이디어와 원리는 유사하다. &lt;strong&gt;중요한건 이 코드가 서버가 아니라 브라우저,
즉 사용자의 컴퓨터에서 돌아간다는것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기존 방식(MVC)에서는 서버가 최종 결과물까지 요리해서 보내줬지만 이제는 브라우저한테 &lt;strong&gt;‘자 여기 이렇게 레시피를 줄테니까 필요한 재료들만 따로 요청해서 너가 직접 요리해’&lt;/strong&gt; 하고 맡겨버리는 것이다.&lt;/p&gt;
&lt;p&gt;렌더링해야하는 파일이 가볍기 때문에 전보다 사이트가 훨씬 &lt;code class=&quot;language-text&quot;&gt;빠르게&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;효율적&lt;/code&gt;으로 동작하는 모습을 볼 수 있다.
작성된 코드들은 자바스크립트가 아닌 프레임워크의 특수 형식이라서 브라우저에서 이 코드가 바로 돌아가지는 않는다. 코딩을 다 하고 이제 배포할 결과물로 빌드하면 브라우저가 읽을 수 있도록 자바스크립트 파일이 만들어진다. 이걸 html, css 파일들과 패키징해서 서버에 진열하면 된다. 브라우저는 이 진열된 묶음을 받아간 다음 이 레시피대로 데이터를 요청하고, 화면을 렌더링해서 보여주면 끝!&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리액트&lt;/code&gt;는 페이스북에서 개발했는데 방대한 자료를 갖고 있고, 다른설계들에 잘 녹아들어서 유연성을 요하는 서비스에 권장된다. &lt;code class=&quot;language-text&quot;&gt;Angular&lt;/code&gt;는 구글에서 만들었는데 Typescript라는 자바스크립트를 보완한 언어로 매우 안정적이고 탄탄한 프론트엔드 앱을 만들 수 있다. 대신 상대적으로 무겁고 배우기 어렵다는 단점이 있다. &lt;code class=&quot;language-text&quot;&gt;Vue&lt;/code&gt;는 evan you라는 개인이 만들었는데 코드가 깔끔하고 배우기 쉽다는 특성 때문에 후발주자지만 빠르게 성장하고 있다. Angular는 프레임워크의 구조가 뚜렷하고 나머지 둘, 특히 리액트는 라이브러리의 특성을 갖는다는 차이가 있다.&lt;/p&gt;
&lt;p&gt;이제 다음 포스팅부터는 본격적으로 리액트에 대해 공부하고 정리해보려고 한다. 궈궈~~&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;이 글은 유투브 &lt;a href=&quot;https://www.youtube.com/watch?v=iE29lbjbow0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;얄팍한 코딩사전&lt;/a&gt;의 영상을 보고 정리한 내용입니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Linux] Linux & Terminal 기초 ]]></title><description><![CDATA[Linux는 시스템을 운영하는데 가장 널리 사용되는 운영체제다. Windows 시스템이나 application이 아닌 이상 일반적으로 시스템 서버는 linux 기반으로 운영되고 있다. Linux에 시스템을 실행하고 유지하고 관리하기 때문에 개발자는 반드시 linux에 대해 잘 이해하고 있어야 한다.]]></description><link>https://rimuuu.github.io/posts/linux/200501/</link><guid isPermaLink="false">https://rimuuu.github.io/posts/linux/200501/</guid><pubDate>Fri, 01 May 2020 07:12:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-리눅스-기초&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%A6%AC%EB%88%85%EC%8A%A4-%EA%B8%B0%EC%B4%88&quot; aria-label=&quot;1 리눅스 기초 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 리눅스 기초&lt;/h2&gt;
&lt;p&gt;Linux는 시스템을 운영하는데 가장 널리 사용되는 운영체제다. Windows 시스템이나 application이 아닌 이상 일반적으로 시스템 서버는 linux 기반으로 운영되고 있다. Linux에 시스템을 실행하고 유지하고 관리하기 때문에 개발자는 반드시 linux에 대해 잘 이해하고 있어야 한다.&lt;/p&gt;
&lt;h3 id=&quot;linux-file-system-hierarchy-fhs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#linux-file-system-hierarchy-fhs&quot; aria-label=&quot;linux file system hierarchy fhs permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linux File System Hierarchy (FHS)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80796375-f868c000-8bd9-11ea-88c4-bdcdfaba14ee.png&quot; alt=&quot;스크린샷 2020-04-28 오후 10 18 50&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;root-directory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#root-directory&quot; aria-label=&quot;root directory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Root Directory&lt;/h4&gt;
&lt;p&gt;가장 위에는 / 디렉토리가 있다. Root 디렉토리 (directory) 라고 한다.
시작점인 root 디렉토리 안에 여러 하위 디렉토리들이 있고 각 하위 디렉토리들안에 또 하위 디렉토리 들이 있는 식이다.&lt;/p&gt;
&lt;p&gt;실제 터미널에서 / 디렉토리로 가보자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd /&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 명령어는 “change directory”의 약자로 특정 디렉토리로 이동할때 사용된다. cd 명령어 다음에 가고자 하는 디렉토리 경로를 입력하면 된다.&lt;/p&gt;
&lt;p&gt;Root 디렉토리로 변경했으면 ls 명령어를 실행하자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt; 명령어는 list의 약자이며 해당 디렉토리의 내용물들을 나열해준다. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;ls -a&lt;/code&gt; 는 숨김파일 까지 모두 나열해준다.&lt;/p&gt;
&lt;p&gt;Root 디렉토리 안에 많은 하위 디렉토리들이 있는 것을 볼 수 있다. 그 중 home 디렉토리가 있는것을 볼 수 있다. home 디렉토리 안으로 가보면 /Users 디렉토리에 유저의 home 디렉토리가 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt; 현재 자신이 어디에 있는지 위치를 알려준다.&lt;/p&gt;
&lt;h3 id=&quot;home-directory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#home-directory&quot; aria-label=&quot;home directory permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Home Directory&lt;/h3&gt;
&lt;p&gt;일반사용자에게 제공되는 전용공간.
시스템 디렉토리 외에 일반 사용자가 취할 수 있는 유일한 전용공간
home디렉토리에 가는 방법은 다른 디렉토리에 위치해있을때,
&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; 라고 입력하기만 해도 홈 디렉토리로 가게 된다.
혹은 &lt;code class=&quot;language-text&quot;&gt;cd ~&lt;/code&gt; 를 입력하면 home디렉토리로 이동한다.
(참고: 물결은 틸다라고 부르고 리눅스에서는 home 디렉토리를 의미한다)&lt;/p&gt;
&lt;h3 id=&quot;directory-경로&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#directory-%EA%B2%BD%EB%A1%9C&quot; aria-label=&quot;directory 경로 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Directory 경로&lt;/h3&gt;
&lt;p&gt;디렉토리 경로에는 2가지 유형이 있는데 절대경로(absolute path)와 상대경로(relative path)이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;절대경로(Absolute Path)&lt;/code&gt;
Absolute path는 이름 그대로 절대적 경로 이다. 즉 완전한 경로이라는 뜻이다. Absolute path는 root 디렉토리 부터 시작하는 경로를 뜻한다. Root 디렉토리에서 부터 현재위치까지 나열된 경로다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;절대경로(Relative Path)&lt;/code&gt;
Relative path는 이름 그대로 “상대적인” 경로 이다. 현재 내 위치와 상관없이 이동 할 수 있는 absolute path와 다르게 relative path는 현재 내 위치를 기반으로 움직이는 경로이다. 여기서 기억해야할 중요한 2가지 심볼이 있다. . 과 .. 이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.(single dot)&lt;/code&gt;: 현재경로
. (single dot) 은 현재 디렉토리를 이야기 한다.
만약 현재 &lt;code class=&quot;language-text&quot;&gt;/Users/sori&lt;/code&gt; 디렉토리에 있는데 &lt;code class=&quot;language-text&quot;&gt;bin&lt;/code&gt;이라는 하위 경로로 가고 싶다면 &lt;code class=&quot;language-text&quot;&gt;cd./bin&lt;/code&gt;이라고 입력한다. 디렉토리 경로가 길때 편하게 쓰기 위한 심볼이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;..(double dot)&lt;/code&gt;: 상위경로
&lt;code class=&quot;language-text&quot;&gt;..&lt;/code&gt; 는 현재 디렉토리 바로 전 디렉토리, 즉 현재 디렉토리의 상위 디렉토리를 뜻한다.
만약 두 단계 상위에 있는 경로로 이동하고 싶다면 &lt;code class=&quot;language-text&quot;&gt;cd ../..&lt;/code&gt; 이라고 중첩해서 쓸 수도 있다.&lt;/p&gt;
&lt;h2 id=&quot;2-configs-환경설정-파일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-configs-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC&quot; aria-label=&quot;2 configs 환경설정 파일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Configs 환경설정 파일&lt;/h2&gt;
&lt;p&gt;Config file
리눅스에는 설정을 주로 파일을 통해서 한다. 그리고 여러 config file, 즉 여러 설정 파일들이 있다. 너무나 다양한 설정 파일들이 있어서 다 알기가 힘들 정도이다. 그 중 가장 중요한 설정 파일이 바로 shell 설정 파일이다. 각 shell 마다 고유 설정 파일이 있다. Bash는 .bashrc 라는 설정파일을 사용하고 zsh는 .zshrc 라는 설정 파일을 사용한다.&lt;/p&gt;
&lt;p&gt;Shell 설정 파일을 비롯한 많은 설정 파일들이 대부분 유저의 home 디렉토리에 있다. Zsh 설정 파일도 마찬가지 이다.
환경설정 파일은 .(dot)파일이라고도 부르고 이는 숨김파일을 의미한다.
ls에는 다양한 옵션이 존재하는데 여기서 조금 더 자세히 보는 옵션 l과 숨김파일도 보여주는 a 옵션을 한번에 같이 쓸 수 있다.
&lt;code class=&quot;language-text&quot;&gt;ls -la&lt;/code&gt;
그럼 이러한 설정 파일을 통해 무엇을 설정해줘야할까?
아주 많은 설정을 할 수 있지만 그 중 가장 중요한 것은 PATH 환경 변수 설정이다.&lt;/p&gt;
&lt;h2 id=&quot;3-path-enviroment-variable-환경변수-path&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-path-enviroment-variable-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-path&quot; aria-label=&quot;3 path enviroment variable 환경변수 path permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. PATH Enviroment Variable 환경변수 PATH&lt;/h2&gt;
&lt;p&gt;환경 변수란 shell의 어떠한 설정 값을 가지고 있는 변수를 말한다. 그리고 이러한 환경 변수들은 shell이 돌아가는 동안 계속 존재하며 사용된다.&lt;/p&gt;
&lt;p&gt;리눅스환경에서 env를 치면 환경변수들을 보여주는데, 이것은 단순히 쉘만을 위해서가 아니라 리닉스를 위해 존재하는데, 눈여겨 봐야하는건 홈과 PATH라는 설정이다. PATH 환경 변수는 명령어들을 찾을 수 있는 경로들을 저장해놓은 환경 변수 이다.
그리고 환경변수를 구분할때에는 콜론을 사용한다.&lt;/p&gt;
&lt;p&gt;특정 경로의 환경 변수를 보고싶을때는 echo 명령어를 이용한다. &lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;echo $HOME&lt;/code&gt;은 HOME 환경변수 값을 보여준다.&lt;/p&gt;
&lt;h3 id=&quot;환경변수-설정-연습&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%A4%EC%A0%95-%EC%97%B0%EC%8A%B5&quot; aria-label=&quot;환경변수 설정 연습 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;환경변수 설정 연습&lt;/h3&gt;
&lt;p&gt;bash 설정파일에 환경변수에 특정경로를 추가하는 작업을 해보자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt; 새로운 디렉토리 생성
&lt;code class=&quot;language-text&quot;&gt;mkdir abcd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd ..&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;vi .bashrc&lt;/code&gt; 배쉬 설정파일에 가서 path를 추가한다.
&lt;code class=&quot;language-text&quot;&gt;export PATH=/home/abcd:$PATH&lt;/code&gt; 저장 후 나가기&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;source .bashrc&lt;/code&gt; 배쉬 설정파일을 다시 읽어들인다.
&lt;code class=&quot;language-text&quot;&gt;echo $PATH&lt;/code&gt; echo명령어로 패스를 찍어본다.&lt;/p&gt;
&lt;h2 id=&quot;4-basic-shell-commands&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-basic-shell-commands&quot; aria-label=&quot;4 basic shell commands permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Basic Shell Commands&lt;/h2&gt;
&lt;p&gt;아래의 명령어들은 앞으로 리눅스를 사용하면서 자주 사용하게 될 명령어다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; change directory의 약자. 해당 디렉토리로 간다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt; list의 약자. 해당 디렉토리에 있는 모든 파일을 나열한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mv&lt;/code&gt; move의 약자. 파일 하나 혹은 여러개의 파일을 옮긴다.
&lt;code class=&quot;language-text&quot;&gt;mv original_file new_file&lt;/code&gt; 형식으로 작성하고, 커맨드가 실행되고 나면 기존 경로파일은 삭제된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cp&lt;/code&gt;copy의 약자. 파일, 디렉토리를 복사한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cat&lt;/code&gt; catch의 약자. 파일 내용을 출력한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;less&lt;/code&gt; 파일 내용을 보는 또 다른 방법. cat과 달리 터미널 세션을 방해하지 않으면서 파일 내에서 양방향 탐색을 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt; 파일 마지막 행을 기준으로 지정한 행까지 내용 일부를 출력한다. 기본값으로 마지막 10줄을 출력한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;nohup&lt;/code&gt; ‘no hang up’의 약자(&lt;code class=&quot;language-text&quot;&gt;끊지마!!!!&lt;/code&gt;). 터미널 세션이 끊겨도 실행을 멈추지 않고 동작하도록 함&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt; remove의 약자로, 하나 이상의 파일을 삭제할 때 사용되지만 옵션값을 주면 디렉토리도 삭제할 수 있다.
&lt;code class=&quot;language-text&quot;&gt;rm -r&lt;/code&gt; 디렉토리 삭제하기
&lt;code class=&quot;language-text&quot;&gt;rm -rf&lt;/code&gt; 현재 디렉토리에 속한 모든 파일과 디렉토리를 삭제한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt; make directory의 약자. 새로운 폴더를 하나 만든다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;clear&lt;/code&gt; 기존 터미널 화면을 지운다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt; print work directory의 약자. 현재 작업중인 디렉토리 경로를 보여준다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;chmod&lt;/code&gt; 시스템 파일 또는 객체의 액세스 권한을 변경하거나 수정하는데 사용하는 가장 강력한 linux 명령어 중 하나.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;chown&lt;/code&gt; chmod 명령과 매우 유사한데 액세스 권한을 변경하는 대신 사용자가 파일 또는 디렉토리 소유권을 변경할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo&lt;/code&gt; 권한이 없는 사용자가 낮은 수준의 권한이 필요한 파일에 액세스하고 수정할 수 있다. (관리자모드라고도 함)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grep&lt;/code&gt; 대량의 텍스트파일에서 패턴을 검색할때 사용할 수 있는 강력한 명령어.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;history&lt;/code&gt; 터미널 세션 기록을 출력한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ps&lt;/code&gt; 현재 시스템에서 실행중인 프로세스를 시각화 할 수 있음.
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;이글은 위코드 부트캠프의 소중한 공부자료를 보고 정리한 내용입니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Git] Git을 편하게 쓸 수 있는 툴 tig ]]></title><description><![CDATA[리눅스에서 git을 쓰다 보면 GUI가 없는 구조이기 때문에 답답할 때가 있다. 가령 특정 파일의 변경 이력을 추적할 때 터미널에서 보여지는 일반적인 화면으로는 그 내용을 파악하기가 쉽지않다. 이를 극복할 수 있게 도와주는 툴이 바로 Tig이다.]]></description><link>https://rimuuu.github.io/posts/git/200501/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/git/200501/2</guid><pubDate>Fri, 01 May 2020 05:12:03 GMT</pubDate><content:encoded>&lt;!-- - [The first transition](#the-first-transition)
- [The digital age](#the-digital-age)
- [Loss of humanity through transitions](#loss-of-humanity-through-transitions)
- [Chasing perfection](#chasing-perfection) --&gt;
&lt;h2 id=&quot;1-tig-text-mode-interface-for-git&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-tig-text-mode-interface-for-git&quot; aria-label=&quot;1 tig text mode interface for git permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Tig: text-mode interface for Git&lt;/h2&gt;
&lt;p&gt;리눅스에서 git을 쓰다 보면 GUI가 없는 구조이기 때문에 답답할 때가 있다. 가령 특정 파일의 변경 이력을 추적할 때 터미널에서 보여지는 일반적인 화면으로는 그 내용을 파악하기가 쉽지않다.
이를 극복할 수 있게 도와주는 툴이 바로 Tig이다.&lt;/p&gt;
&lt;p&gt;tig는 텍스트 기반의 Git 유저 인터페이스인데, 이 글에서 tig의 설치와 간단한 사용법에 대해 정리해보려고 한다.&lt;/p&gt;
&lt;h2 id=&quot;2-tig-설치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-tig-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;2 tig 설치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. tig 설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jonas.github.io/tig/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;접속하기&lt;/a&gt;
위의 사이트에 접속하면 tig 를 설치하는 메뉴얼 페이지가 나온다. tig의 장점 중 하나가 가볍기 때문에 간단히 설치할 수 있다. 나는 더 간단하게 brew를 이용해서 설치했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ brew install tig&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-tig-사용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-tig-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;3 tig 사용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. tig 사용하기&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ tig&lt;/code&gt;
git log 대신 tig 명령어를 사용하면 commit한 내역을 좀 더 쉽게 볼 수 있다.
방향키를 사용해서 내가 자세히 보고싶은 commit 내역에 들어가서 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80792708-1fba8f80-8bd0-11ea-9997-271ad66cbfb1.png&quot; alt=&quot;스크린샷 2020-05-01 오후 1 05 24&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$ tig status&lt;/code&gt;
tig status를 입력한 상태에서 h 버튼을 누르면 단축키 정보를 확인할 수 있다. 이 정보를 토대로 필요한 기능을 익혀 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80793144-462cfa80-8bd1-11ea-8e0b-3d944a1541b5.png&quot; alt=&quot;스크린샷 2020-05-01 오후 5 28 53&quot;&gt;&lt;/p&gt;
&lt;!-- _Originally published by [Matej Latin](http://matejlatin.co.uk/) on [Medium](https://medium.com/design-notes/humane-typography-in-the-digital-age-9bd5c16199bd?ref=webdesignernews.com#.lygo82z0x)._ --&gt;</content:encoded></item><item><title><![CDATA[[Gatsby] Gatsby 블로그 만들기 ]]></title><description><![CDATA[드디어 나도 만들었다 정적 블로그... 개발 공부 아예 처음 시작했을때 시도 해봤다가 정말 뭐가 뭔지 모르겠어서 한 번 절망하고, 그 후에 위코드 개강 전에 벨로그로 블로그 쓰기 시작하다 답답해서 다시 한 번 각잡고 도전해봤다가 또 실패했었다.]]></description><link>https://rimuuu.github.io/posts/gatsby/200501</link><guid isPermaLink="false">https://rimuuu.github.io/posts/gatsby/200501</guid><pubDate>Fri, 01 May 2020 04:12:03 GMT</pubDate><content:encoded>&lt;p&gt;드디어 나도 만들었다 정적 블로그…
개발 공부 아예 처음 시작했을때 시도 해봤다가 정말 뭐가 뭔지 모르겠어서 한 번 절망하고,
그 후에 위코드 개강 전에 벨로그로 블로그 쓰기 시작하다 답답해서 다시 한 번 각잡고 도전해봤다가 또 실패했었다.
그때 하루종일 터미널로 뭔가를 설치했다가 삭제하기를 반복하며 정말 우울했는데 …&lt;/p&gt;
&lt;p&gt;이제 그래도 git 공부 조금, 그리고 터미널 공부 조금 했다고 모르는 사이에 약간 성장하긴 했나보다.
어제 gatsby 블로그 세션 들으면서 같이 따라해보면서 블로그를 만들고 포스팅도 할 수 있게 되었다. 후후후 &lt;br&gt;
(정해진 테마와 내용을 절대 건드릴 수 없다는건 함정…)
암튼 그래서 어제 배운 내용들을 꼭 정리해두려고 포스팅한다 !&lt;/p&gt;
&lt;h2 id=&quot;정적-사이트-생성기-static-site-generator-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%83%9D%EC%84%B1%EA%B8%B0-static-site-generator-&quot; aria-label=&quot;정적 사이트 생성기 static site generator  permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적 사이트 생성기 (Static Site Generator) ?&lt;/h2&gt;
&lt;p&gt;개발자는 자기가 공부한 지식을 마구 자랑하고 자기가 쌓고 있는 지식을 눈에 보이게 축적을 해두는 게 중요하다.
그래서 개발자에게 있어서 기술블로그 관리는 선택이 아니라 필수일 수 밖에 없는데,
일반적인 네이버 블로그 같은 사이트를 이용하는 게 아니라 코드를 검색할 수 있도록 검색로직이 적용된 블로그를 사용해야지
검색엔진에 노출이 될 수 있다.&lt;/p&gt;
&lt;p&gt;그 중에서 Gatsby나 Jekyll 같은 &lt;code class=&quot;language-text&quot;&gt;정적 사이트 생성기(Static Site Generator)&lt;/code&gt;를 이용해서 Github page 블로그를 만들어 사용하는 개발자들이 많다. 정적 사이트 생성기는 쉽게 말해서 블로그에 필요한 메인페이지, 상세페이지, 메뉴 등을 미리 개발하여 누구나 쉽게 정적 사이트를 만들 수 있게 도와주는 툴이다.&lt;/p&gt;
&lt;p&gt;이걸 이용해서 블로그를 설치하고, 설정을 조금 수정하고, 글을 작성하고 배포하면 된다. github를 이용해서 배포를 하고, github에서 제공하는 도메인을 사용하게 된다.&lt;/p&gt;
&lt;h2 id=&quot;배포-deploy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%AC-deploy&quot; aria-label=&quot;배포 deploy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포 (deploy)?&lt;/h2&gt;
&lt;p&gt;항상 켜져 있는 서버에 내가 만든 프로그램을 올리면 url만 입력하면 누구나 접속을 할 수 있게 된다.
그 서버에 올리는 작업을 &lt;code class=&quot;language-text&quot;&gt;배포&lt;/code&gt;라고 한다.&lt;/p&gt;
&lt;h2 id=&quot;블로그-설치-순서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%B9%98-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;블로그 설치 순서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;블로그 설치 순서&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Gatsby 테마 고르기&lt;/li&gt;
&lt;li&gt;Gatsby Starter로 블로그 설치&lt;/li&gt;
&lt;li&gt;내 컴퓨터(로컬환경)에서 블로그 띄우기&lt;/li&gt;
&lt;li&gt;Gatsby config 수정하기&lt;/li&gt;
&lt;li&gt;github.io repo만들기&lt;/li&gt;
&lt;li&gt;배포하기&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;0-사전-준비&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0-%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84&quot; aria-label=&quot;0 사전 준비 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0. 사전 준비&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt;이 깔려있어야 한다.&lt;/p&gt;
&lt;p&gt;참고: &lt;code class=&quot;language-text&quot;&gt;npm&lt;/code&gt;
node package manager의 약자이다.
package는 외부 라이브러리를 말하는데, npm은 이런 패키지들을 관리하는 툴이다.
앞으로 어떤 패키지를 설치할때마다 npm을 이용해서 설치하고 관리하게 될 것이다.
yarn도 똑같은 기능을 하고 회사만 다르다.&lt;/p&gt;
&lt;h3 id=&quot;1-gatsby-테마-고르기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-gatsby-%ED%85%8C%EB%A7%88-%EA%B3%A0%EB%A5%B4%EA%B8%B0&quot; aria-label=&quot;1 gatsby 테마 고르기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Gatsby 테마 고르기&lt;/h3&gt;
&lt;p&gt;Gatsby Starter 사이트에서 테마를 하나 선택한다.
지금 이 블로그에 적용된 테마는 gatsby-starter-lumen
테마가 다르면 설정이 조금 달라져서 다음의 스텝이 동일하게 진행되지 않을 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;2-gatsby-starter로-블로그-설치생성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-gatsby-starter%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%84%A4%EC%B9%98%EC%83%9D%EC%84%B1&quot; aria-label=&quot;2 gatsby starter로 블로그 설치생성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Gatsby Starter로 블로그 설치(생성)&lt;/h3&gt;
&lt;p&gt;터미널에서 gatsby 명령어를 사용할 수 있도록 gatsby-cli를 터미널 전역에 설치한다,&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그다음에는 위에서 정한 theme의 source code를 가져와야 하는데, 블로그를 만들고 싶은 directory에서 아래와 같이 실행한다. gatsby 명령어를 사용하여 blog라는 디렉토리에 블로그의 소스코드를 가져온다는 의미이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby new blog https://github.com/alxshelepenok/gatsby-starter-lumen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위를 설치하면 앞으로 package manager를 yarn으로 할 것인지, npm으로 할 것인지 물어보는데, gatsby의 default가 yarn으로 설정되어있는 것 같은데 npm으로 설치해도 무방하다.&lt;/p&gt;
&lt;p&gt;혹시 yarn을 설치하려면 아래와 같이 하면 된다.
&lt;code class=&quot;language-text&quot;&gt;npm install -g yarn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;성공하면 현재 위치에 blog라는 디렉토리가 생성되고, 이 안에 각종 파일이 생성된다. 방금 만든 디렉토리(blog)로 가서 파일이 잘 생겼는지 확인해보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80781213-829a2f80-8bac-11ea-9d32-a2dc7b08f0d7.png&quot; alt=&quot;스크린샷 2020-05-01 오후 1 05 24&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-내-컴퓨터로컬환경에서-블로그-띄우기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%82%B4-%EC%BB%B4%ED%93%A8%ED%84%B0%EB%A1%9C%EC%BB%AC%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%9D%84%EC%9A%B0%EA%B8%B0&quot; aria-label=&quot;3 내 컴퓨터로컬환경에서 블로그 띄우기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 내 컴퓨터(로컬환경)에서 블로그 띄우기&lt;/h3&gt;
&lt;p&gt;설치가 제대로 되었는지 확인해보자. 앞으로 블로그 글을 작성할 때마다 중간 점검을 하기 위해서는 아래 명령어로 로컬 서버를 띄워줘야한다. 근데 그전에 나는 yarn이 아닌 npm으로 설치를 해서 설정파일에서 명령어를 조금 수정 해줘야 한다.
vscode에서 아까 생성한 blog 폴더에 가서 &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;파일을 연다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;은
내가 받은 패키지의 환경설정, 버전, 명령어 등이 정의되어 있는 파일이다.
내가 가져온 패키지의 명령어를 바꾸고싶다면 이 파일을 수정하면 된다.
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기서 &lt;code class=&quot;language-text&quot;&gt;dependency&lt;/code&gt; 부분에 가서
&lt;code class=&quot;language-text&quot;&gt;&amp;quot;npm run clean &amp;amp;&amp;amp; gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&amp;quot;&lt;/code&gt; 라고 수정을 한다.
npm 명령어가 적용될 수 있도록 yarn이라고 된 부분을 npm이라고 바꿨을 뿐이다.&lt;/p&gt;
&lt;p&gt;수정 후 서버가 돌아가게 해본다.
&lt;code class=&quot;language-text&quot;&gt;npm run develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80781892-09500c00-8baf-11ea-9f5f-2101693eb391.png&quot; alt=&quot;스크린샷 2020-05-01 오후 1 23 40&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 상태에서 인터넷 창을 열고 &lt;code class=&quot;language-text&quot;&gt;localhost:8000&lt;/code&gt; 에 접속해보면 내가 가져온 테마로 블로그가 렌더링된다.
이런 화면이 뜬다면 블로그 만들기의 첫 발을 잘 뗀거다.&lt;/p&gt;
&lt;p&gt;참고 : &lt;code class=&quot;language-text&quot;&gt;localhost&lt;/code&gt;
웹상에 html, css, js를 작동시켜서 사이트를 보려면 서버가 필요하다. 그런데 내 컴퓨터에서만 접속할 수 있는 로컬호스트라는게 존재하기 때문에 간단하게 이 서버에 올려 웹 페이지의 상태를 체크할 수 있다. 앞으로 블로그를 작성하는 도중에 생각대로 markdown이 잘 적용됐는지, 아닌지를 확인하려면 내 컴퓨터에서 npm run develop 명령어로 서버를 띄워서 localhost:8000으로 접속하면 된다.&lt;/p&gt;
&lt;p&gt;로컬서버가 켜있는 터미널을 닫으면 서버가 종료되므로 더이상 localhost:8000에 접속할 수 없기 때문에 포스팅 작성 시작할때부터 배포 직전까지 로컬서버를 띄우고 터미널을 계속 열어두면 된다.&lt;/p&gt;
&lt;p&gt;만약 멈추고 싶으면 서버를 실행한 터미널에서 &lt;code class=&quot;language-text&quot;&gt;ctrl c&lt;/code&gt;를 입력해서 나올 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;4-github에-레포지토리-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-github%EC%97%90-%EB%A0%88%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;4 github에 레포지토리 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Github에 레포지토리 생성하기&lt;/h3&gt;
&lt;p&gt;이제 블로그 배포를 위한 사전 준비에 들어간다.
Github에 앞으로 블로그 파일들을 관리하고 또 배포할 도메인 주소로 사용될 레포를 하나 만들어야한다.
이때 주의할 점은 아래와 같이 github의 username 뒤에 .github.io 을 붙여서 만들어줘야한다. 내 github username은 rimuuu이기 때문에 rimuuu.github.io 으로 만들었다.&lt;/p&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;rimuuu.github.io&lt;/code&gt;로 접속할 수 있는 블로그 레포가 생성되었다.&lt;/p&gt;
&lt;h3 id=&quot;5-gatsby-config-수정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-gatsby-config-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;5 gatsby config 수정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Gatsby config 수정하기&lt;/h3&gt;
&lt;p&gt;블로그 url도 만들었으니 설정파일에서 몇가지 정보를 수정하면 된다.
&lt;code class=&quot;language-text&quot;&gt;config.js&lt;/code&gt; 파일을 찾아서 title, subtitle, author 등등 본인 정보로 수정한다.
이 중에서 url은 위에서 만든 블로그 주소 &lt;a href=&quot;https://%EA%B9%83%ED%97%99%EC%9C%A0%EC%A0%80%EB%84%A4%EC%9E%84.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://깃헙유저네임.github.io/&lt;/a&gt; 이다.&lt;/p&gt;
&lt;h3 id=&quot;6-packagejson-에서-배포-명령어-수정하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-packagejson-%EC%97%90%EC%84%9C-%EB%B0%B0%ED%8F%AC-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;6 packagejson 에서 배포 명령어 수정하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. package.json 에서 배포 명령어 수정하기&lt;/h3&gt;
&lt;p&gt;위의 3번에서 했던 명령어 수정과 동일한 방식으로 배포에 대한 명령어도 npm으로 수정해야한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm run clean &amp;amp;&amp;amp; gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-배포하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;7 배포하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 배포하기&lt;/h3&gt;
&lt;p&gt;이제 로컬에 있는 블로그 소스코드를 github에 올려보겠다.
내 블로그 작업파일들이 있는 디렉토리 &lt;code class=&quot;language-text&quot;&gt;blog&lt;/code&gt;에 git 명령어로 로컬 저장소를 생성하고,
github에 생성한 리모트 저장소 (레파지토리)와 연결해서 관리하겠다는 말이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;git remote add origin https://github.com/rimuuu/rimuuu.github.io.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이렇게 리모트 저장소와 연결이 잘 되었는지 확인 하기 위해
&lt;code class=&quot;language-text&quot;&gt;git remote -v&lt;/code&gt;를 입력하여 확인해본다.
리모트 저장소 url이 들어간 목록이 잘 나오면 잘 하고 있는 것이다.&lt;/p&gt;
&lt;p&gt;이제 연결이 되었으니 push를 해보자.
&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;git commit -m &amp;quot;first commit&amp;quot;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;푸쉬가 잘 되었는지 github에 가서 소스코드들을 확인해보자.
잘 들어가 있으면 이제 배포도 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt;
배포 명령어를 입력하고 시간이 1~3분 정도 흐른 뒤에 내 블로그 url에 접속해보면 블로그가 나와야한다.&lt;/p&gt;
&lt;h3 id=&quot;8-효율적인-블로그-관리를-위해-브랜치-따기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B4%80%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%B4-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%94%B0%EA%B8%B0&quot; aria-label=&quot;8 효율적인 블로그 관리를 위해 브랜치 따기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 효율적인 블로그 관리를 위해 브랜치 따기&lt;/h3&gt;
&lt;p&gt;이제 기본적 블로그 생성 후 배포까지 마쳤다면, 앞으로 어떻게 블로그 작업파일을 관리하고 보관할지에 대한 부분으로 넘어간다. deploy 명령어만으로 블로그를 서버에 띄울 수 있지만 블로그 작성파일들을 github에 관리하고
후에 컴퓨터를 바꾸거나 다른곳에서 포스팅을 해야할때를 대비하여 github에 파일을 커밋하여 보관해야 할 필요가 있다.&lt;/p&gt;
&lt;p&gt;그런데 단순히 master branch에 보관하는게 아니라, 별도의 브랜치를 만들어서 관리하는게 좋다.
왜냐하면 보관되는 파일들은 markdown 언어로 작성된 파일인데 이게 배포가 된 후 master 브랜치에 가서 확인을 해보면 전혀 다른 이름의 파일들로 바뀌어 있다.
gatsby에서 markdown 형식 파일들을 올리고 배포 명령어를 입력하면,
이 markdown 파일을 자동으로 markup 언어로 (html) 바꾸어 버리기 때문이다.&lt;/p&gt;
&lt;p&gt;그래서 원본 파일들을 보관하고 혹시 수정이 필요할 때 언제든 가져다 쓸 수 있는 원본용 브랜치를 만들어 따로보관 할 필요가 있는 것이다.&lt;/p&gt;
&lt;p&gt;브랜치를 따는 방법은 아래를 참고하자.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;git push origin develop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이제 master 브랜치는 손 댈 필요없이 develop 브랜치만 관리하면 된다.&lt;/p&gt;
&lt;p&gt;이렇게 블로그 만들기 끄읏!&lt;/p&gt;
&lt;!-- - [The first transition](#the-first-transition)
- [The digital age](#the-digital-age)
- [Loss of humanity through transitions](#loss-of-humanity-through-transitions)
- [Chasing perfection](#chasing-perfection) --&gt;
&lt;p&gt;&lt;em&gt;Originally published by &lt;a href=&quot;#&quot;&gt;Yeri Kim&lt;/a&gt; on &lt;a href=&quot;https://yeri-kim.github.io/posts/how-to-install-gatsby/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Git] Git merge와 Conflict 해결하기]]></title><description><![CDATA[master브랜치에서 분화하여 기능별로 작업한 branch들이 최종적으로 개발이 완료되면 master브랜치에 합체를 해야한다. 이때 사용하는 개념이 `merge(병합)`이고, 다음의 순서를 거친다.]]></description><link>https://rimuuu.github.io/posts/git/200430/3</link><guid isPermaLink="false">https://rimuuu.github.io/posts/git/200430/3</guid><pubDate>Thu, 30 Apr 2020 08:12:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-git-merge&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-git-merge&quot; aria-label=&quot;1 git merge permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Git Merge&lt;/h1&gt;
&lt;p&gt;master브랜치에서 분화하여 기능별로 작업한 branch들이 최종적으로 개발이 완료되면 master브랜치에 합체를 해야한다.
이때 사용하는 개념이 &lt;code class=&quot;language-text&quot;&gt;merge(병합)&lt;/code&gt;이고, 다음의 순서를 거친다.&lt;/p&gt;
&lt;h3 id=&quot;master-브랜치의-권한이-나에게-있는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#master-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%9D%98-%EA%B6%8C%ED%95%9C%EC%9D%B4-%EB%82%98%EC%97%90%EA%B2%8C-%EC%9E%88%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;master 브랜치의 권한이 나에게 있는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;master 브랜치의 권한이 나에게 있는 경우&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;마스터 브런치로 돌아오기
&lt;code class=&quot;language-text&quot;&gt;$ git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git merge 뒤에 변화를 가져올 브런치 이름을 적는다.
&lt;code class=&quot;language-text&quot;&gt;git merge feature/login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;커밋을 저장하는 vi editor화면이 뜨면 커밋내용 입력하고 :wq로 저장하고 나간다.
&lt;br&gt;
(i를 입력하면 입력모드가 시작되고 esc를 누르면 입력모드가 끝난다. 그 상태에서 :wq)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;[참고]&lt;/strong&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;git log --graph --all --decorate&lt;/code&gt;&lt;br&gt;
두 브랜치에서의 작업내역을 시각화된 형태로 볼 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;master-브랜치의-권한이-나에게-없는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#master-%EB%B8%8C%EB%9E%9C%EC%B9%98%EC%9D%98-%EA%B6%8C%ED%95%9C%EC%9D%B4-%EB%82%98%EC%97%90%EA%B2%8C-%EC%97%86%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;master 브랜치의 권한이 나에게 없는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;master 브랜치의 권한이 나에게 없는 경우&lt;/h3&gt;
&lt;p&gt;브랜치의 작업내역을 리모트 저장소로 푸쉬한 뒤 해당 깃헙 주소로 가보면 변경사항이 반영되었고, pull request에
&lt;code class=&quot;language-text&quot;&gt;New pull request&lt;/code&gt;를 할 수 있게 되어있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80712448-f98fe380-8b2c-11ea-9c04-a7630f7cbad7.png&quot; alt=&quot;스크린샷 2020-04-30 오후 9 51 27&quot;&gt;&lt;/p&gt;
&lt;p&gt;오른쪽 아래에 보이는 &lt;code class=&quot;language-text&quot;&gt;Create pull request&lt;/code&gt; 버튼을 누르면 PR을 할 수 있다
(PR은 한 브랜치 당 한 번 할 수 있음)&lt;/p&gt;
&lt;p&gt;주의사항: 두개의 브런치에서 같은 파일에 대해 서로 다른 결과를 입력했다면 merge를 할때 conflict라는 에러가 발생한다. 두개의 내용 중 어떤걸 택할지 결정하고 다시 시도하라는 뜻이다.
그래서 특히 협업을 하거나 여러브런치를 나눠서 사용할때는 같은 파일에 대한 코드를 서로 다르게 입력하지 않도록 조심하는게 좋다.
둘중 하나를 택일해서 다른쪽에 대한 내용을 지워준 후 다시 커밋하면 해결된다. 이 부분은 아래에서 좀 더 구체적으로 보겠다.&lt;/p&gt;
&lt;h2 id=&quot;2-conflict-해결하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-conflict-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;2 conflict 해결하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Conflict 해결하기&lt;/h2&gt;
&lt;p&gt;실제로 협업하여 개발을 진행할때 merge가 그리 평화롭게 이루어지지 않는다.
앞으로 많은 conflict를 마주하게 될 것이고, 그 때마다 변경사항을 잘 골라서 다시 커밋 후 merge 해야한다.
그래서 conflict 해결하는 방법에 대해 꼭 기억해두려고 포스팅을 남겨둔다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ git pull origin master&lt;/code&gt; master 브랜치의 최신본을 원격에서 당겨오기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;🚨 컨플릭트가 났다는 경고가 뜸 🚨&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/60246689/80711817-f1837400-8b2b-11ea-8901-d95c51f58018.jpg&quot; alt=&quot;IMG_2024&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ cd 파일위치&lt;/code&gt; 컨플릭트가 난 파일이 있는 곳으로 간다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ vi 파일명&lt;/code&gt; 해당 들어가서 컨플릭트가 난 부분 중에 원하는 내용을 선택하여 수정, 저장&lt;/li&gt;
&lt;li&gt;이제 리모트 저장소에 업데이트 내용을 업데이트 해줘야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin feature/login&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이후 다시 merge하면 해결!
근데 그 사이에 다른 사람들이 먼저 수정을 했다면 또 컨플릭트가 날 수도…&lt;/p&gt;
&lt;!-- - [The first transition](#the-first-transition)
- [The digital age](#the-digital-age)
- [Loss of humanity through transitions](#loss-of-humanity-through-transitions)
- [Chasing perfection](#chasing-perfection) --&gt;
&lt;!-- _Originally published by [Matej Latin](http://matejlatin.co.uk/) on [Medium](https://medium.com/design-notes/humane-typography-in-the-digital-age-9bd5c16199bd?ref=webdesignernews.com#.lygo82z0x)._ --&gt;</content:encoded></item><item><title><![CDATA[[Git] Git Remote 저장소와 Local 저장소 연결하여 관리하기  ]]></title><description><![CDATA[앞서 살펴봤던 Git의 저장소(repository)는 두가지 종류가 있는데, `Remote repository`와 `Local repository`가 바로 그것이다.   Git은 개인적으로 코드의 변경사항을 추적하고 프로젝트를 관리하기 위해 사용할 뿐만 아니라 다른 사람들과 협업하여 개발할때 역시 아주 중요한 역할을 담당하고 그 부분을 위해 등장하는게 바로 remote repository(원격저장소)이다.]]></description><link>https://rimuuu.github.io/posts/git/200430/2</link><guid isPermaLink="false">https://rimuuu.github.io/posts/git/200430/2</guid><pubDate>Thu, 30 Apr 2020 04:12:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;remote-저장소와-local-저장소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-local-%EC%A0%80%EC%9E%A5%EC%86%8C&quot; aria-label=&quot;remote 저장소와 local 저장소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Remote 저장소와 Local 저장소&lt;/h1&gt;
&lt;p&gt;앞서 살펴봤던 Git의 저장소(repository)는 두가지 종류가 있는데, &lt;code class=&quot;language-text&quot;&gt;Remote repository&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Local repository&lt;/code&gt;가 바로 그것이다.&lt;br&gt;
Git은 개인적으로 코드의 변경사항을 추적하고 프로젝트를 관리하기 위해 사용할 뿐만 아니라 다른 사람들과 협업하여 개발할때 역시 아주 중요한 역할을 담당하고 그 부분을 위해 등장하는게 바로 remote repository(원격저장소)이다.&lt;/p&gt;
&lt;p&gt;이 원격저장소를 위해 주로 사용되는 것은 &lt;code class=&quot;language-text&quot;&gt;Github&lt;/code&gt;인데, git을 효율적으로 관리하기 위한 원격서버이자 클라우드 역할을 담당한다. 평소에는 자신의 PC의 Local repository에서 작업하다가 자신의 소스코드를 공개하고 싶을 때, 혹은 다른사람들과 협업을 시작해야할때 Remote repository에 개발한 소스코드를 업로드한다. (&lt;code class=&quot;language-text&quot;&gt;Push&lt;/code&gt;) 내 소스코드를 올리는 것 뿐만 아니라, Remote repository에서 다른 사람의 소스코드를 자신의 Local repository로 가져올 수도 있다. (&lt;code class=&quot;language-text&quot;&gt;Pull&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/7368df43-dd64-4d1e-abf8-b5a3d228c970/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.27.33.png&quot;&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/cc53a881-aac4-438b-9a6f-ad49b8b1bfa8/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.30.40.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;remote-저장소와-local-저장소-연결하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-local-%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;remote 저장소와 local 저장소 연결하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Remote 저장소와 Local 저장소 연결하기&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;github에서 새로운 레파지토리를 생성한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$ git remote add origin 레파지토리주소&lt;/code&gt;
가령 내가 만든 westagram이라는 레파지토리를 로컬과 연결하고 싶다면 &lt;br&gt;
$ git remote add origin &lt;a href=&quot;https://github.com/rimuuu/westagram.git&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/rimuuu/westagram.git&lt;/a&gt; 이라고 입력한다.
참고로 여기서 origin은 큰 의미 없는 git을 구분하기 위해서 사용하는 이름표 같은 것이다.
내가 원하는 아무 단어로 바꿔도 아무 상관없다.&lt;/li&gt;
&lt;li&gt;remote 저장소가 잘 연결되었는지 확인해보고싶다면
&lt;code class=&quot;language-text&quot;&gt;$ git remote -v&lt;/code&gt;라고 입력해보면 현재 내 로컬저장소와 연결된 remote저장소의 목록을 볼 수 있다.
내가 개발하고 있는 westagram 폴더에 가서 명령을 입력해보니 내 remote 저장소의 목록이 나왔다.
&lt;img src=&quot;https://images.velog.io/images/rimu/post/ffb89da6-9eb5-4b12-beef-05b2a6a20e62/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.42.11.png&quot;&gt;&lt;/li&gt;
&lt;li&gt;개발을 하다가 이 시점을 기록하고싶다면 &lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;의 과정을 거친다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin master&lt;/code&gt;라고 입력하면 내 remote저장소로 push가 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;브랜치를-넘나들며-작업하고-remote-저장소에-올리기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%A5%BC-%EB%84%98%EB%82%98%EB%93%A4%EB%A9%B0-%EC%9E%91%EC%97%85%ED%95%98%EA%B3%A0-remote-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-%EC%98%AC%EB%A6%AC%EA%B8%B0&quot; aria-label=&quot;브랜치를 넘나들며 작업하고 remote 저장소에 올리기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;브랜치를 넘나들며 작업하고 Remote 저장소에 올리기&lt;/h2&gt;
&lt;h3 id=&quot;branch&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#branch&quot; aria-label=&quot;branch permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Branch&lt;/h3&gt;
&lt;p&gt;모든 작업 내용을 master에만 푸쉬하면 너무 잦은 충돌과 소스가 뒤엉키는 문제가 생긴다.
그래서 최대한 기능별로 branch를 나눠서 작업을 하는게 필요하다.&lt;/p&gt;
&lt;p&gt;흔히 branch를 딴다고 말하는데, 브랜치를 딴다는건 이름표만 바꿔서 특정시간대로 프로젝트를 복제하는거다.
브랜치를 따서 작업해서 좋은점은 특정시점의 복제본을 갖고 있기 때문에 기준점이 있어서 검토 작업을 할때 혼란이 덜하다. 그 외에도 아래와 같은 장점을 갖고 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.다른 사람들과 협업할때 같은 부분을 다르게 개발하여 발생하는 충돌을 줄일 수 있다. 2.기능별로 정해진 부분만 작업할 수 있어서 프로젝트 관리가 수월하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;브랜치를 넘나들며 작업을 하고 싶을때는 아래와 같은 순서를 따르면 된다.
일반적인 git workflow를 벗어나지 않되, branch를 생성하고 checkout하고 push할때 branch 이름을 적용하는 정도만 달라진다.
&lt;code class=&quot;language-text&quot;&gt;git branch feature/comment&lt;/code&gt;
네이밍을 할때는 기능별로 나누기때문에 feature라고 시작하는게 일반적인 방&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch&lt;/code&gt; 브랜치가 잘 생성되었는지 본다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout feature/comment&lt;/code&gt; 기준 브랜치를 바꾼다. (작업영역을 바꾼다)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt; 작업의 변경사항을 스테이지에 올린다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git commit -m “”&lt;/code&gt; 커밋한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin feature/comment&lt;/code&gt; 브랜치의 변경사항을 원격에 올린다.&lt;/p&gt;
&lt;p&gt;이제 원격에 새로운 브랜치가 생성되고 변경사항이 반영이 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;깃 짱짱맨! 이해하고 나니 깃 넘 재밌다.ㅎㅎㅎ (아직까지는🙄?) &lt;br&gt;
이제 1일 1커밋 가보즈아~&lt;br&gt;
&lt;img src=&quot;https://images.velog.io/images/rimu/post/83839fa9-f5d0-43a5-8390-3c24d2065ded/IMG_1840.GIF&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;이글은 위코드 부트캠프의 git 세션을 듣고 정리한 내용입니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[[Git] Git 작업흐름과 기본명령어]]></title><description><![CDATA[ Git은 어떤 프로젝트를 진행할때 ‘시간 여행이 가능한 평행 우주를 만드는것’과 같다. 메인작업을 진행하면서 실험적인 작업을 해보고 싶을때, 깃이 없다면 폴더를 통째로 복사해서 각각에서 진행을 해야겠지만 깃에서는 폴더 안에서 여러 평행우주를 생성해서 그 우주들 안에서 각각 다른 버전으로 프로젝트를 관리할 수 있다.]]></description><link>https://rimuuu.github.io/posts/git/200430/1</link><guid isPermaLink="false">https://rimuuu.github.io/posts/git/200430/1</guid><pubDate>Thu, 30 Apr 2020 00:12:03 GMT</pubDate><content:encoded>&lt;!-- - [The first transition](#the-first-transition)
- [The digital age](#the-digital-age)
- [Loss of humanity through transitions](#loss-of-humanity-through-transitions)
- [Chasing perfection](#chasing-perfection) --&gt;
&lt;h1 id=&quot;1-git을-사용해야-하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-git%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;1 git을 사용해야 하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Git을 사용해야 하는 이유&lt;/h1&gt;
&lt;p&gt;Git은 어떤 프로젝트를 진행할때 &lt;strong&gt;‘시간 여행이 가능한 평행 우주를 만드는것’&lt;/strong&gt; 과 같다. 메인작업을 진행하면서 실험적인 작업을 해보고 싶을때, 깃이 없다면 폴더를 통째로 복사해서 각각에서 진행을 해야겠지만 깃에서는 폴더 안에서 여러 평행우주를 생성해서 그 우주들 안에서 각각 다른 버전으로 프로젝트를 관리할 수 있다. 혹은 개발을 하다가 어떤 단계로 되돌아가고 싶을때 단순히 ctrl + Z 차원이 아니라 아예 그때 그 시간으로 되돌아가서 작업을 할 수 있다.이렇게 시공간을 넘나들 수 있는 🐶쩌는 능력을 사용하지 않을 이유가 없음!&lt;/p&gt;
&lt;p&gt;=&gt; 이 평행우주를 어떻게 만들고 사용할까? 깃을 생성하고 현재 시점에서 타임캡슐(커밋)에 묻어놓으면 된다.&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&quot;2git-basic-work-flow&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2git-basic-work-flow&quot; aria-label=&quot;2git basic work flow permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.Git Basic Work Flow&lt;/h1&gt;
&lt;h2 id=&quot;git-basis&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-basis&quot; aria-label=&quot;git basis permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git basis&lt;/h2&gt;
&lt;p&gt;Git을 사용해서 파일 버전 관리를 할때 파일은 다음 3개의 상태중 하나의 상태에 있게 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/4af4be68-2648-47d5-9f5f-4b77edd13313/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.13.22.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Modified&lt;/code&gt;
Modified file은 이름 그대로 수정된 file이다. 하지만 아직 “commited” 되지 않은 상태의 file을 말한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Staged&lt;/code&gt;
Staged file은 modified file에서 한단계 더 나아가서 곧 commit 될거라고 mark 해놓은 상태이다. 즉 modified 와 committed의 중간 상태라고 할 수 있다.
이렇게 중간 상태가 존재 하는 이유는, commit 하기전에 중간 상태를 저장할 수 있도록 하기 위해서다. Commit을 하면 commit history에 남기도 하고, 혹시 추가 수정 사항이 있거나 다시 되돌려야 할때 까다롭기 때문에 (commit 후에도 다시 되돌리는게 가능은 함) commit 전에 중간 상태에 저장할 수 있도록 하는 것이다. 즉, commit은 해당 개발이 완전 완료 됬을때 하는 것이기 때문에, 아직 완료는 안되었지만 그래도 중간 상태를 저장할 필요가 있을때 staging을 사용하는 것.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Committed&lt;/code&gt;
수정 사항들이 git에 저장이 된 상태를 “committed” 라고 하고 이러한 행위를 “commit” 한다고 표현한다.&lt;/p&gt;
&lt;h3 id=&quot;git-basic-work-flow&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-basic-work-flow&quot; aria-label=&quot;git basic work flow permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git Basic Work Flow&lt;/h3&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;소스코드 전체를 다운로드 받는다 (전문적인 언어로는 “git repository를 checkout 한다”).&lt;/li&gt;
&lt;li&gt;소스코드 파일들을 수정 합니다. 즉 개발을 한다.&lt;/li&gt;
&lt;li&gt;수정한 파일들을 stage 한다.&lt;/li&gt;
&lt;li&gt;그리고 계속 해서 소스코드 파일들을 수정해 나간다.
해당 작업이 완료될때까지, 즉 commit 할 준비가 될때까지, 3,4번을 반복합니다.&lt;/li&gt;
&lt;li&gt;완료되면 commit 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;basic-git-commands&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#basic-git-commands&quot; aria-label=&quot;basic git commands permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Git Commands&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt;
프로젝트를 git repository로 만들기 위해서 사용하는 명령어. 여기서 프로젝트(project)라 함은 개발하고자 하는 소스코드들이 있는 디렉토리를 말한다. git init을 해서 git repo로 만들어야 git으로 버전 관리가 시작된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt;
수정 사항들, 즉 modified 파일들을 staged 상태로 옮기는 명령어. 그리고 git repo에 새로 추가된 파일들을 staged 상태로 옮길때도 사용된다. 새로 추가된 파일들은 “untracked” 파일 이라고 하는데, git에서는 이들도 수정 사항이라고 본다.
&lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt; 수정된 모든 파일을 staged 상태로 옮긴다는 의미&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt;
staged 된 파일들을 commit 할때 사용하는 명령어&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git diff&lt;/code&gt;
개발 하고 있는 파일에 어떤 수정 사항들이 적용되었는지 보고싶을때 사용하는 명령어. 참고로 staged 된 수정 사항들은 git diff로 볼 수 없고, Modified 된 파일들만 git diff로 볼 수 있다.
(즉 git add 전에만 사용 가능 )&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt;
현재 상태를 보여주는 명령어. 어떠한 파일들이 modified가 되었고 어떠한 파일들이 staged가 되었는지 등의 전체적인 상황을 보여준다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git log&lt;/code&gt;
Commit 내역들을 보여주고 Commit history라고도 한다. git log를 통해 이제까지 커밋 내역들을 전부 볼 수 있다. 다만 출력되는 포맷이 보기가 쉽지가 않아서 tig 같은 tool을 사용하면 훨씬 편리하다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git rm&lt;/code&gt;
원하는 파일을 git repo에서 삭제한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git mv&lt;/code&gt;
원하는 파일을 git repo 상에서 이동 시킬때 사용한다. 주로 rename 할때 사용 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch&lt;/code&gt;
Branch를 생성할 때 사용된다. Branch에 관해서는 아래를 참고하기&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout&lt;/code&gt;
어떤 branch를 checkout 할때 사용되는 명령어&lt;/p&gt;
&lt;br&gt;
&lt;h1 id=&quot;3-branch--merging&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-branch--merging&quot; aria-label=&quot;3 branch  merging permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Branch &amp;#x26; Merging&lt;/h1&gt;
&lt;p&gt;Branch는 나뭇가지 혹은 분점 을 뜻한다. 즉 기본이 되는 큰 줄기가 있고 그 줄기로 부터 옆으로 가지가 나는걸 의미하는데, Git의 branch 모델이 바로 이러한 구조이다. 먼저 git에서 기준이 되는 &lt;code class=&quot;language-text&quot;&gt;master branch&lt;/code&gt;가 있다. 그리고 각 개발자는 master branch를 checkout 먼저 하고, master branch로 부터 자신만의 branch를 만든다. 이걸 &lt;code class=&quot;language-text&quot;&gt;feature branch&lt;/code&gt;라고 한다. 그리고 feature branch를 기반으로 개발을 한 후 개발이 완료가 되고 commit을 하면 자신의 &lt;code class=&quot;language-text&quot;&gt;feature branch&lt;/code&gt;를 다시 &lt;code class=&quot;language-text&quot;&gt;master branch&lt;/code&gt;로 합하게 된다. 이렇게 합하는 과정을 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; 한다고 말한다.&lt;/p&gt;
&lt;h3 id=&quot;branch-활용하는법-정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#branch-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94%EB%B2%95-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;branch 활용하는법 정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;branch 활용하는법 정리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Master branch&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;checkout&lt;/code&gt; 한다.&lt;/li&gt;
&lt;li&gt;자신만의 &lt;code class=&quot;language-text&quot;&gt;feature branch&lt;/code&gt;를 만든다.&lt;/li&gt;
&lt;li&gt;Feature branch에서 개발을 한다.&lt;/li&gt;
&lt;li&gt;완료되면 &lt;code class=&quot;language-text&quot;&gt;commit&lt;/code&gt; 한다.&lt;/li&gt;
&lt;li&gt;Master branch에 feature branch를 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/rimu/post/e2a71e10-2a9d-4edf-aa8c-ff63fe3e584c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-04-30%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.38.47.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;basic-git-branch-commands&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#basic-git-branch-commands&quot; aria-label=&quot;basic git branch commands permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Basic Git Branch Commands&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch 브랜치명&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout feature/login&lt;/code&gt;
브랜치 이동하기 (checkout)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch&lt;/code&gt;
현재 브랜치 확인하기
현재 체크아웃된 브랜치와 내가 갖고 있는 브랜치 목록을 확인할 수 있음&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git branch -D feature/login&lt;/code&gt;
브랜치 삭제하기&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;em&gt;이글은 위코드 부트캠프의 소중한 공부자료를 보고 정리한 내용입니다.&lt;/em&gt;&lt;/p&gt;</content:encoded></item></channel></rss>